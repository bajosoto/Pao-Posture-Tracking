//
//  PaoDrawingAssets.swift
//  Pao
//
//  Created by Sergio Soto on 10/6/17.
//  Copyright Â© 2017 Pao. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class PaoDrawingAssets : NSObject {

    //// Drawing Methods

    public dynamic class func drawPaoBackground(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 736), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 736), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 736)


        //// Color Declarations
        let paoBgLight = UIColor(red: 0.224, green: 0.598, blue: 0.649, alpha: 1.000)
        let paoBgDark = UIColor(red: 0.016, green: 0.010, blue: 0.147, alpha: 1.000)

        //// Gradient Declarations
        let paoBgGradient = CGGradient(colorsSpace: nil, colors: [paoBgLight.cgColor, paoBgLight.blended(withFraction: 0.5, of: paoBgDark).cgColor, paoBgDark.cgColor] as CFArray, locations: [0, 0.38, 1])!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 414, height: 736))
        context.saveGState()
        rectanglePath.addClip()
        context.drawRadialGradient(paoBgGradient,
            startCenter: CGPoint(x: -179.92, y: -200.6), startRadius: 126.76,
            endCenter: CGPoint(x: 36.88, y: 24.34), endRadius: 801.56,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawPaoEgg(frame: CGRect = CGRect(x: 0, y: 0, width: 250, height: 250), time: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let paoEggWater = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let paoEggShine = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let paoShellGradDark = UIColor(red: 0.896, green: 0.896, blue: 0.896, alpha: 1.000)
        let paoShellGradLight = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let paoEggBtnCenter = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let paoEggBtnRidge = UIColor(red: 0.907, green: 0.907, blue: 0.907, alpha: 1.000)

        //// Gradient Declarations
        let paoEggGradient = CGGradient(colorsSpace: nil, colors: [paoShellGradDark.cgColor, paoShellGradLight.cgColor] as CFArray, locations: [0, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.33)
        shadow.shadowOffset = CGSize(width: 1, height: 1)
        shadow.shadowBlurRadius = 2

        //// Variable Declarations
        let timeinverse: CGFloat = 1 - time
        let sinoftime: CGFloat = sin(360 * time * CGFloat.pi/180) * 8

        //// PaoEggAnimation
        context.saveGState()
        context.setAlpha(0.8)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Water Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.77992 * frame.height)
        context.scaleBy(x: time, y: time)

        context.saveGState()
        context.setAlpha(timeinverse)

        let waterPath = UIBezierPath()
        waterPath.move(to: CGPoint(x: -0, y: -34.86))
        waterPath.addCurve(to: CGPoint(x: -77.55, y: -0), controlPoint1: CGPoint(x: -42.83, y: -34.86), controlPoint2: CGPoint(x: -77.55, y: -19.25))
        waterPath.addCurve(to: CGPoint(x: -0, y: 34.86), controlPoint1: CGPoint(x: -77.55, y: 19.25), controlPoint2: CGPoint(x: -42.83, y: 34.86))
        waterPath.addCurve(to: CGPoint(x: 77.55, y: -0), controlPoint1: CGPoint(x: 42.83, y: 34.86), controlPoint2: CGPoint(x: 77.55, y: 19.25))
        waterPath.addCurve(to: CGPoint(x: 65.62, y: -18.59), controlPoint1: CGPoint(x: 77.55, y: -6.83), controlPoint2: CGPoint(x: 73.18, y: -13.21))
        waterPath.addCurve(to: CGPoint(x: -0, y: -34.86), controlPoint1: CGPoint(x: 51.88, y: -28.36), controlPoint2: CGPoint(x: 27.63, y: -34.86))
        waterPath.close()
        waterPath.move(to: CGPoint(x: 65.85, y: -23.31))
        waterPath.addCurve(to: CGPoint(x: 81, y: -0), controlPoint1: CGPoint(x: 75.39, y: -16.75), controlPoint2: CGPoint(x: 81, y: -8.7))
        waterPath.addCurve(to: CGPoint(x: -0, y: 40.02), controlPoint1: CGPoint(x: 81, y: 22.1), controlPoint2: CGPoint(x: 44.74, y: 40.02))
        waterPath.addCurve(to: CGPoint(x: -81, y: -0), controlPoint1: CGPoint(x: -44.74, y: 40.02), controlPoint2: CGPoint(x: -81, y: 22.1))
        waterPath.addCurve(to: CGPoint(x: 0, y: -40.02), controlPoint1: CGPoint(x: -81, y: -22.1), controlPoint2: CGPoint(x: -44.74, y: -40.02))
        waterPath.addCurve(to: CGPoint(x: 65.85, y: -23.31), controlPoint1: CGPoint(x: 27.13, y: -40.02), controlPoint2: CGPoint(x: 51.15, y: -33.43))
        waterPath.close()
        paoEggWater.setFill()
        waterPath.fill()

        context.restoreGState()

        context.restoreGState()


        //// PaoEgg
        context.saveGState()
        context.translateBy(x: frame.maxX - 125, y: frame.maxY - 55.02)
        context.rotate(by: -sinoftime * CGFloat.pi/180)



        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 71.67, y: -76.63))
        ovalPath.addCurve(to: CGPoint(x: -0, y: 5.02), controlPoint1: CGPoint(x: 71.67, y: -31.53), controlPoint2: CGPoint(x: 39.58, y: 5.02))
        ovalPath.addCurve(to: CGPoint(x: -71.67, y: -76.63), controlPoint1: CGPoint(x: -39.58, y: 5.02), controlPoint2: CGPoint(x: -71.67, y: -31.53))
        ovalPath.addCurve(to: CGPoint(x: 0, y: -173.31), controlPoint1: CGPoint(x: -71.67, y: -121.72), controlPoint2: CGPoint(x: -36.92, y: -173.31))
        ovalPath.addCurve(to: CGPoint(x: 71.67, y: -76.63), controlPoint1: CGPoint(x: 36.92, y: -173.31), controlPoint2: CGPoint(x: 71.67, y: -121.72))
        ovalPath.close()
        context.saveGState()
        ovalPath.addClip()
        context.drawRadialGradient(paoEggGradient,
            startCenter: CGPoint(x: 24.31, y: -29.74), startRadius: 51.59,
            endCenter: CGPoint(x: -4.34, y: -73.25), endRadius: 108.21,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        paoEggBtnRidge.setStroke()
        ovalPath.lineWidth = 0.2
        ovalPath.lineCapStyle = .round
        ovalPath.stroke()


        //// paoEggButtonOutline Drawing
        let paoEggButtonOutlinePath = UIBezierPath(ovalIn: CGRect(x: -52, y: -119.98, width: 104, height: 105))
        paoEggBtnRidge.setFill()
        paoEggButtonOutlinePath.fill()


        //// paoEggButton Drawing
        let paoEggButtonPath = UIBezierPath(ovalIn: CGRect(x: -48, y: -116.98, width: 96, height: 99))
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        paoEggBtnCenter.setFill()
        paoEggButtonPath.fill()
        context.restoreGState()



        //// paoEggHighlight Drawing
        context.saveGState()
        context.setAlpha(0.9)

        let paoEggHighlightPath = UIBezierPath()
        paoEggHighlightPath.move(to: CGPoint(x: 25.13, y: -165.59))
        paoEggHighlightPath.addCurve(to: CGPoint(x: 71.67, y: -76.63), controlPoint1: CGPoint(x: 51.27, y: -149.53), controlPoint2: CGPoint(x: 71.67, y: -111.17))
        paoEggHighlightPath.addCurve(to: CGPoint(x: 11.86, y: 3.91), controlPoint1: CGPoint(x: 71.67, y: -36.14), controlPoint2: CGPoint(x: 45.8, y: -2.53))
        paoEggHighlightPath.addCurve(to: CGPoint(x: 43.43, y: -20.76), controlPoint1: CGPoint(x: 21.72, y: -1.42), controlPoint2: CGPoint(x: 33.75, y: -9.27))
        paoEggHighlightPath.addCurve(to: CGPoint(x: 54.29, y: -115.3), controlPoint1: CGPoint(x: 65.15, y: -46.55), controlPoint2: CGPoint(x: 62.98, y: -87.37))
        paoEggHighlightPath.addCurve(to: CGPoint(x: 25.13, y: -165.59), controlPoint1: CGPoint(x: 47.46, y: -137.28), controlPoint2: CGPoint(x: 39.09, y: -149.68))
        paoEggHighlightPath.close()
        paoEggShine.setFill()
        paoEggHighlightPath.fill()

        context.restoreGState()



        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
    }

    public dynamic class func drawScanningView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 736), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 736), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 736)


        //// Color Declarations
        let paoTextWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 0, width: 414, height: 736)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        PaoDrawingAssets.drawPaoBackground(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 82, y: 243, width: 250, height: 250)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        PaoDrawingAssets.drawPaoEgg(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), time: 0)
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 108.5, y: 612.3, width: 197, height: 45.81)
        let textTextContent = "Scanning for paÃ³..."
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Book", size: 20)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 0, y: 0, width: 414, height: 28)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        PaoDrawingAssets.drawPaoTitleBar(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawDashboardView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 736), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 736), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 736)


        //// Color Declarations
        let paoBarBlue = UIColor(red: 0.024, green: 0.671, blue: 0.925, alpha: 1.000)
        let paoBarGreen = UIColor(red: 0.184, green: 0.886, blue: 0.686, alpha: 1.000)
        let paoTextWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let paoBarGradient = CGGradient(colorsSpace: nil, colors: [paoBarBlue.cgColor, paoBarGreen.cgColor] as CFArray, locations: [0, 1])!

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 414, height: 736)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        PaoDrawingAssets.drawPaoBackground(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 164.6, y: 73.63, width: 84.8, height: 84.8)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        PaoDrawingAssets.drawPaoProfilePic(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 0, y: 0, width: 414, height: 28)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        PaoDrawingAssets.drawPaoTitleBar(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch)
        context.restoreGState()


        //// paoBar
        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 57, y: 202.23, width: 300, height: 20)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        PaoDrawingAssets.drawPaoPostureBar(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, currentPosture: 1)
        context.restoreGState()


        //// Symbol 5 Drawing
        let symbol5Rect = CGRect(x: 25.08, y: 186, width: 40.16, height: 52.45)
        context.saveGState()
        context.clip(to: symbol5Rect)
        context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

        PaoDrawingAssets.drawPaoManSlouching(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 6 Drawing
        let symbol6Rect = CGRect(x: 347, y: 186, width: 40.16, height: 52.45)
        context.saveGState()
        context.clip(to: symbol6Rect)
        context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

        PaoDrawingAssets.drawPaoManNotSlouching(frame: CGRect(origin: .zero, size: symbol6Rect.size), resizing: .stretch)
        context.restoreGState()


        //// paoTitle 2 Drawing
        context.saveGState()
        context.setAlpha(0.5)

        let paoTitle2Rect = CGRect(x: 158.41, y: 216.64, width: 97.18, height: 20.81)
        let paoTitle2TextContent = "NOW"
        let paoTitle2Style = NSMutableParagraphStyle()
        paoTitle2Style.alignment = .center
        let paoTitle2FontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Heavy", size: 15)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: paoTitle2Style]

        let paoTitle2TextHeight: CGFloat = paoTitle2TextContent.boundingRect(with: CGSize(width: paoTitle2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: paoTitle2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: paoTitle2Rect)
        paoTitle2TextContent.draw(in: CGRect(x: paoTitle2Rect.minX, y: paoTitle2Rect.minY + (paoTitle2Rect.height - paoTitle2TextHeight) / 2, width: paoTitle2Rect.width, height: paoTitle2TextHeight), withAttributes: paoTitle2FontAttributes)
        context.restoreGState()

        context.restoreGState()




        //// paoPostSitting
        //// Symbol 7 Drawing
        let symbol7Rect = CGRect(x: 36.2, y: 278.7, width: 80, height: 80)
        context.saveGState()
        context.clip(to: symbol7Rect)
        context.translateBy(x: symbol7Rect.minX, y: symbol7Rect.minY)

        PaoDrawingAssets.drawPaoSittingGoal(frame: CGRect(origin: .zero, size: symbol7Rect.size), resizing: .stretch, postureGoalPercentage: 0.55)
        context.restoreGState()


        //// paoTitle Drawing
        context.saveGState()
        context.setAlpha(0.5)

        let paoTitleRect = CGRect(x: 27.61, y: 344.7, width: 97.18, height: 20.81)
        let paoTitleTextContent = "SITTING"
        let paoTitleStyle = NSMutableParagraphStyle()
        paoTitleStyle.alignment = .center
        let paoTitleFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Heavy", size: 15)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: paoTitleStyle]

        let paoTitleTextHeight: CGFloat = paoTitleTextContent.boundingRect(with: CGSize(width: paoTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: paoTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: paoTitleRect)
        paoTitleTextContent.draw(in: CGRect(x: paoTitleRect.minX, y: paoTitleRect.minY + (paoTitleRect.height - paoTitleTextHeight) / 2, width: paoTitleRect.width, height: paoTitleTextHeight), withAttributes: paoTitleFontAttributes)
        context.restoreGState()

        context.restoreGState()




        //// paoPostStanding
        //// Symbol 8 Drawing
        let symbol8Rect = CGRect(x: 166.8, y: 278.7, width: 80, height: 80)
        context.saveGState()
        context.clip(to: symbol8Rect)
        context.translateBy(x: symbol8Rect.minX, y: symbol8Rect.minY)

        PaoDrawingAssets.drawPaoStandingGoal(frame: CGRect(origin: .zero, size: symbol8Rect.size), resizing: .stretch, postureGoalPercentage: 0.3)
        context.restoreGState()


        //// paoTitle 3 Drawing
        context.saveGState()
        context.setAlpha(0.5)

        let paoTitle3Rect = CGRect(x: 158.21, y: 344.7, width: 97.18, height: 20.81)
        let paoTitle3TextContent = "STANDING"
        let paoTitle3Style = NSMutableParagraphStyle()
        paoTitle3Style.alignment = .center
        let paoTitle3FontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Heavy", size: 15)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: paoTitle3Style]

        let paoTitle3TextHeight: CGFloat = paoTitle3TextContent.boundingRect(with: CGSize(width: paoTitle3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: paoTitle3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: paoTitle3Rect)
        paoTitle3TextContent.draw(in: CGRect(x: paoTitle3Rect.minX, y: paoTitle3Rect.minY + (paoTitle3Rect.height - paoTitle3TextHeight) / 2, width: paoTitle3Rect.width, height: paoTitle3TextHeight), withAttributes: paoTitle3FontAttributes)
        context.restoreGState()

        context.restoreGState()




        //// paoPostMoving
        //// Symbol 9 Drawing
        let symbol9Rect = CGRect(x: 297.8, y: 278.7, width: 80, height: 80)
        context.saveGState()
        context.clip(to: symbol9Rect)
        context.translateBy(x: symbol9Rect.minX, y: symbol9Rect.minY)

        PaoDrawingAssets.drawPaoMovingGoal(frame: CGRect(origin: .zero, size: symbol9Rect.size), resizing: .stretch, postureGoalPercentage: 0.6)
        context.restoreGState()


        //// paoTitle 4 Drawing
        context.saveGState()
        context.setAlpha(0.5)

        let paoTitle4Rect = CGRect(x: 289.21, y: 344.7, width: 97.18, height: 20.81)
        let paoTitle4TextContent = "MOVING"
        let paoTitle4Style = NSMutableParagraphStyle()
        paoTitle4Style.alignment = .center
        let paoTitle4FontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Heavy", size: 15)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: paoTitle4Style]

        let paoTitle4TextHeight: CGFloat = paoTitle4TextContent.boundingRect(with: CGSize(width: paoTitle4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: paoTitle4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: paoTitle4Rect)
        paoTitle4TextContent.draw(in: CGRect(x: paoTitle4Rect.minX, y: paoTitle4Rect.minY + (paoTitle4Rect.height - paoTitle4TextHeight) / 2, width: paoTitle4Rect.width, height: paoTitle4TextHeight), withAttributes: paoTitle4FontAttributes)
        context.restoreGState()

        context.restoreGState()




        //// paoGraph
        //// Bezier Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 59.98, y: 424.39))
        bezierPath.addLine(to: CGPoint(x: 59.98, y: 542.45))
        paoTextWhite.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()

        context.restoreGState()


        //// Bezier 2 Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 102.2, y: 424.39))
        bezier2Path.addLine(to: CGPoint(x: 102.2, y: 542.45))
        paoTextWhite.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.lineCapStyle = .round
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()

        context.restoreGState()


        //// Bezier 3 Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 144.2, y: 424.39))
        bezier3Path.addLine(to: CGPoint(x: 144.2, y: 542.45))
        paoTextWhite.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.lineCapStyle = .round
        bezier3Path.lineJoinStyle = .round
        bezier3Path.stroke()

        context.restoreGState()


        //// Bezier 4 Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 186.2, y: 424.39))
        bezier4Path.addLine(to: CGPoint(x: 186.2, y: 542.45))
        paoTextWhite.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.lineCapStyle = .round
        bezier4Path.lineJoinStyle = .round
        bezier4Path.stroke()

        context.restoreGState()


        //// Bezier 5 Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 228.2, y: 424.39))
        bezier5Path.addLine(to: CGPoint(x: 228.2, y: 542.45))
        paoTextWhite.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.lineCapStyle = .round
        bezier5Path.lineJoinStyle = .round
        bezier5Path.stroke()

        context.restoreGState()


        //// Bezier 6 Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 270.2, y: 424.39))
        bezier6Path.addLine(to: CGPoint(x: 270.2, y: 542.45))
        paoTextWhite.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.lineCapStyle = .round
        bezier6Path.lineJoinStyle = .round
        bezier6Path.stroke()

        context.restoreGState()


        //// Bezier 7 Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 312.2, y: 424.39))
        bezier7Path.addLine(to: CGPoint(x: 312.2, y: 542.45))
        paoTextWhite.setStroke()
        bezier7Path.lineWidth = 1
        bezier7Path.lineCapStyle = .round
        bezier7Path.lineJoinStyle = .round
        bezier7Path.stroke()

        context.restoreGState()


        //// Bezier 8 Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 354.02, y: 424.39))
        bezier8Path.addLine(to: CGPoint(x: 354.02, y: 542.45))
        paoTextWhite.setStroke()
        bezier8Path.lineWidth = 1
        bezier8Path.lineCapStyle = .round
        bezier8Path.lineJoinStyle = .round
        bezier8Path.stroke()

        context.restoreGState()


        //// Bezier 9 Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 47.77, y: 483.45))
        bezier9Path.addLine(to: CGPoint(x: 368.02, y: 483.45))
        paoTextWhite.setStroke()
        bezier9Path.lineWidth = 1
        bezier9Path.lineCapStyle = .round
        bezier9Path.lineJoinStyle = .round
        bezier9Path.stroke()

        context.restoreGState()


        //// paoTitle 5 Drawing
        context.saveGState()
        context.setAlpha(0.3)

        let paoTitle5Rect = CGRect(x: 41.79, y: 403.58, width: 36.38, height: 20.81)
        let paoTitle5TextContent = "09:00"
        let paoTitle5Style = NSMutableParagraphStyle()
        paoTitle5Style.alignment = .center
        let paoTitle5FontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Medium", size: 10)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: paoTitle5Style]

        let paoTitle5Inset: CGRect = paoTitle5Rect.insetBy(dx: 0, dy: 1)
        let paoTitle5TextHeight: CGFloat = paoTitle5TextContent.boundingRect(with: CGSize(width: paoTitle5Inset.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: paoTitle5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: paoTitle5Inset)
        paoTitle5TextContent.draw(in: CGRect(x: paoTitle5Inset.minX, y: paoTitle5Inset.minY + (paoTitle5Inset.height - paoTitle5TextHeight) / 2, width: paoTitle5Inset.width, height: paoTitle5TextHeight), withAttributes: paoTitle5FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// paoTitle 6 Drawing
        context.saveGState()
        context.setAlpha(0.3)

        let paoTitle6Rect = CGRect(x: 84.01, y: 403.58, width: 36.38, height: 20.81)
        let paoTitle6TextContent = "10:00"
        let paoTitle6Style = NSMutableParagraphStyle()
        paoTitle6Style.alignment = .center
        let paoTitle6FontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Medium", size: 10)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: paoTitle6Style]

        let paoTitle6Inset: CGRect = paoTitle6Rect.insetBy(dx: 0, dy: 1)
        let paoTitle6TextHeight: CGFloat = paoTitle6TextContent.boundingRect(with: CGSize(width: paoTitle6Inset.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: paoTitle6FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: paoTitle6Inset)
        paoTitle6TextContent.draw(in: CGRect(x: paoTitle6Inset.minX, y: paoTitle6Inset.minY + (paoTitle6Inset.height - paoTitle6TextHeight) / 2, width: paoTitle6Inset.width, height: paoTitle6TextHeight), withAttributes: paoTitle6FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// paoTitle 7 Drawing
        context.saveGState()
        context.setAlpha(0.3)

        let paoTitle7Rect = CGRect(x: 126.01, y: 403.58, width: 36.38, height: 20.81)
        let paoTitle7TextContent = "11:00"
        let paoTitle7Style = NSMutableParagraphStyle()
        paoTitle7Style.alignment = .center
        let paoTitle7FontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Medium", size: 10)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: paoTitle7Style]

        let paoTitle7Inset: CGRect = paoTitle7Rect.insetBy(dx: 0, dy: 1)
        let paoTitle7TextHeight: CGFloat = paoTitle7TextContent.boundingRect(with: CGSize(width: paoTitle7Inset.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: paoTitle7FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: paoTitle7Inset)
        paoTitle7TextContent.draw(in: CGRect(x: paoTitle7Inset.minX, y: paoTitle7Inset.minY + (paoTitle7Inset.height - paoTitle7TextHeight) / 2, width: paoTitle7Inset.width, height: paoTitle7TextHeight), withAttributes: paoTitle7FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// paoTitle 8 Drawing
        context.saveGState()
        context.setAlpha(0.3)

        let paoTitle8Rect = CGRect(x: 168.01, y: 403.58, width: 36.38, height: 20.81)
        let paoTitle8TextContent = "12:00"
        let paoTitle8Style = NSMutableParagraphStyle()
        paoTitle8Style.alignment = .center
        let paoTitle8FontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Medium", size: 10)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: paoTitle8Style]

        let paoTitle8Inset: CGRect = paoTitle8Rect.insetBy(dx: 0, dy: 1)
        let paoTitle8TextHeight: CGFloat = paoTitle8TextContent.boundingRect(with: CGSize(width: paoTitle8Inset.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: paoTitle8FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: paoTitle8Inset)
        paoTitle8TextContent.draw(in: CGRect(x: paoTitle8Inset.minX, y: paoTitle8Inset.minY + (paoTitle8Inset.height - paoTitle8TextHeight) / 2, width: paoTitle8Inset.width, height: paoTitle8TextHeight), withAttributes: paoTitle8FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// paoTitle 9 Drawing
        context.saveGState()
        context.setAlpha(0.3)

        let paoTitle9Rect = CGRect(x: 210.42, y: 403.58, width: 36.38, height: 20.81)
        let paoTitle9TextContent = "13:00"
        let paoTitle9Style = NSMutableParagraphStyle()
        paoTitle9Style.alignment = .center
        let paoTitle9FontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Medium", size: 10)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: paoTitle9Style]

        let paoTitle9Inset: CGRect = paoTitle9Rect.insetBy(dx: 0, dy: 1)
        let paoTitle9TextHeight: CGFloat = paoTitle9TextContent.boundingRect(with: CGSize(width: paoTitle9Inset.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: paoTitle9FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: paoTitle9Inset)
        paoTitle9TextContent.draw(in: CGRect(x: paoTitle9Inset.minX, y: paoTitle9Inset.minY + (paoTitle9Inset.height - paoTitle9TextHeight) / 2, width: paoTitle9Inset.width, height: paoTitle9TextHeight), withAttributes: paoTitle9FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// paoTitle 10 Drawing
        context.saveGState()
        context.setAlpha(0.3)

        let paoTitle10Rect = CGRect(x: 252.01, y: 403.58, width: 36.38, height: 20.81)
        let paoTitle10TextContent = "14:00"
        let paoTitle10Style = NSMutableParagraphStyle()
        paoTitle10Style.alignment = .center
        let paoTitle10FontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Medium", size: 10)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: paoTitle10Style]

        let paoTitle10Inset: CGRect = paoTitle10Rect.insetBy(dx: 0, dy: 1)
        let paoTitle10TextHeight: CGFloat = paoTitle10TextContent.boundingRect(with: CGSize(width: paoTitle10Inset.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: paoTitle10FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: paoTitle10Inset)
        paoTitle10TextContent.draw(in: CGRect(x: paoTitle10Inset.minX, y: paoTitle10Inset.minY + (paoTitle10Inset.height - paoTitle10TextHeight) / 2, width: paoTitle10Inset.width, height: paoTitle10TextHeight), withAttributes: paoTitle10FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// paoTitle 11 Drawing
        context.saveGState()
        context.setAlpha(0.3)

        let paoTitle11Rect = CGRect(x: 294.01, y: 403.58, width: 36.38, height: 20.81)
        let paoTitle11TextContent = "15:00"
        let paoTitle11Style = NSMutableParagraphStyle()
        paoTitle11Style.alignment = .center
        let paoTitle11FontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Medium", size: 10)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: paoTitle11Style]

        let paoTitle11Inset: CGRect = paoTitle11Rect.insetBy(dx: 0, dy: 1)
        let paoTitle11TextHeight: CGFloat = paoTitle11TextContent.boundingRect(with: CGSize(width: paoTitle11Inset.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: paoTitle11FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: paoTitle11Inset)
        paoTitle11TextContent.draw(in: CGRect(x: paoTitle11Inset.minX, y: paoTitle11Inset.minY + (paoTitle11Inset.height - paoTitle11TextHeight) / 2, width: paoTitle11Inset.width, height: paoTitle11TextHeight), withAttributes: paoTitle11FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// paoTitle 12 Drawing
        context.saveGState()
        context.setAlpha(0.3)

        let paoTitle12Rect = CGRect(x: 335.83, y: 403.58, width: 36.38, height: 20.81)
        let paoTitle12TextContent = "16:00"
        let paoTitle12Style = NSMutableParagraphStyle()
        paoTitle12Style.alignment = .center
        let paoTitle12FontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Medium", size: 10)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: paoTitle12Style]

        let paoTitle12Inset: CGRect = paoTitle12Rect.insetBy(dx: 0, dy: 1)
        let paoTitle12TextHeight: CGFloat = paoTitle12TextContent.boundingRect(with: CGSize(width: paoTitle12Inset.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: paoTitle12FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: paoTitle12Inset)
        paoTitle12TextContent.draw(in: CGRect(x: paoTitle12Inset.minX, y: paoTitle12Inset.minY + (paoTitle12Inset.height - paoTitle12TextHeight) / 2, width: paoTitle12Inset.width, height: paoTitle12TextHeight), withAttributes: paoTitle12FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// paoTitle 13 Drawing
        context.saveGState()
        context.setAlpha(0.5)

        let paoTitle13Rect = CGRect(x: 157.53, y: 550.86, width: 97.18, height: 20.81)
        let paoTitle13TextContent = "TODAY"
        let paoTitle13Style = NSMutableParagraphStyle()
        paoTitle13Style.alignment = .center
        let paoTitle13FontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Heavy", size: 15)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: paoTitle13Style]

        let paoTitle13TextHeight: CGFloat = paoTitle13TextContent.boundingRect(with: CGSize(width: paoTitle13Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: paoTitle13FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: paoTitle13Rect)
        paoTitle13TextContent.draw(in: CGRect(x: paoTitle13Rect.minX, y: paoTitle13Rect.minY + (paoTitle13Rect.height - paoTitle13TextHeight) / 2, width: paoTitle13Rect.width, height: paoTitle13TextHeight), withAttributes: paoTitle13FontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 49.06, y: 483.1))
        bezier10Path.addCurve(to: CGPoint(x: 113.28, y: 433.81), controlPoint1: CGPoint(x: 49.06, y: 483.1), controlPoint2: CGPoint(x: 90.6, y: 426.39))
        bezier10Path.addCurve(to: CGPoint(x: 153.05, y: 520.06), controlPoint1: CGPoint(x: 135.96, y: 441.23), controlPoint2: CGPoint(x: 128.14, y: 516.57))
        bezier10Path.addCurve(to: CGPoint(x: 197.44, y: 463.06), controlPoint1: CGPoint(x: 177.97, y: 523.56), controlPoint2: CGPoint(x: 175.36, y: 472.91))
        bezier10Path.addCurve(to: CGPoint(x: 234.57, y: 475.07), controlPoint1: CGPoint(x: 219.52, y: 453.2), controlPoint2: CGPoint(x: 221.81, y: 478.7))
        bezier10Path.addCurve(to: CGPoint(x: 251.89, y: 438.56), controlPoint1: CGPoint(x: 247.33, y: 471.43), controlPoint2: CGPoint(x: 241.45, y: 439.33))
        bezier10Path.addCurve(to: CGPoint(x: 277.55, y: 516.07), controlPoint1: CGPoint(x: 262.34, y: 437.78), controlPoint2: CGPoint(x: 270.51, y: 517.03))
        bezier10Path.addCurve(to: CGPoint(x: 293.29, y: 467.17), controlPoint1: CGPoint(x: 284.6, y: 515.11), controlPoint2: CGPoint(x: 284.78, y: 472.48))
        bezier10Path.addCurve(to: CGPoint(x: 332.37, y: 494.07), controlPoint1: CGPoint(x: 301.81, y: 461.86), controlPoint2: CGPoint(x: 306.76, y: 488.07))
        bezier10Path.addCurve(to: CGPoint(x: 367.4, y: 482.97), controlPoint1: CGPoint(x: 357.99, y: 500.08), controlPoint2: CGPoint(x: 367.4, y: 482.97))
        context.saveGState()
        bezier10Path.addClip()
        context.drawLinearGradient(paoBarGradient, start: CGPoint(x: 208.23, y: 433.14), end: CGPoint(x: 208.23, y: 520.23), options: [])
        context.restoreGState()




        //// Symbol 10 Drawing
        let symbol10Rect = CGRect(x: 39.2, y: 615.7, width: 66, height: 90)
        context.saveGState()
        context.clip(to: symbol10Rect)
        context.translateBy(x: symbol10Rect.minX, y: symbol10Rect.minY)

        PaoDrawingAssets.drawPaoButtonTrain(frame: CGRect(origin: .zero, size: symbol10Rect.size), resizing: .stretch, isPressed: false)
        context.restoreGState()


        //// Symbol 11 Drawing
        let symbol11Rect = CGRect(x: 129, y: 616, width: 66, height: 90)
        context.saveGState()
        context.clip(to: symbol11Rect)
        context.translateBy(x: symbol11Rect.minX, y: symbol11Rect.minY)

        PaoDrawingAssets.drawPaoButtonDebug(frame: CGRect(origin: .zero, size: symbol11Rect.size), resizing: .stretch, isPressed: false)
        context.restoreGState()


        //// Symbol 12 Drawing
        let symbol12Rect = CGRect(x: 219, y: 616, width: 66, height: 90)
        context.saveGState()
        context.clip(to: symbol12Rect)
        context.translateBy(x: symbol12Rect.minX, y: symbol12Rect.minY)

        PaoDrawingAssets.drawPaoButtonConfig(frame: CGRect(origin: .zero, size: symbol12Rect.size), resizing: .stretch, isPressed: false)
        context.restoreGState()


        //// Symbol 13 Drawing
        let symbol13Rect = CGRect(x: 309.21, y: 616, width: 66, height: 90)
        context.saveGState()
        context.clip(to: symbol13Rect)
        context.translateBy(x: symbol13Rect.minX, y: symbol13Rect.minY)

        PaoDrawingAssets.drawPaoButtonHelp(frame: CGRect(origin: .zero, size: symbol13Rect.size), resizing: .stretch, isPressed: false)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawPaoProfilePic(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 126, height: 126), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 126, height: 126), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 126, y: resizedFrame.height / 126)


        //// Color Declarations
        let paoTextWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Image Declarations
        let profilePic = UIImage(named: "profilePic.png")!

        //// paoProfilePicOutline Drawing
        context.saveGState()
        context.setAlpha(0.8)

        let paoProfilePicOutlinePath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 126, height: 126))
        paoTextWhite.setFill()
        paoProfilePicOutlinePath.fill()

        context.restoreGState()


        //// paoProfilePic
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Oval
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 3, y: 3, width: 120, height: 120))
        ovalPath.addClip()


        //// PaoProfilePicPic Drawing
        let paoProfilePicPicPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 126, height: 126))
        context.saveGState()
        paoProfilePicPicPath.addClip()
        context.translateBy(x: 0, y: 0)
        context.scaleBy(x: 1, y: -1)
        context.translateBy(x: 0, y: -profilePic.size.height)
        context.draw(profilePic.cgImage!, in: CGRect(x: 0, y: 0, width: profilePic.size.width, height: profilePic.size.height))
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawPaoPostureBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 20), resizing: ResizingBehavior = .aspectFit, currentPosture: CGFloat = 0.839) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 20)


        //// Color Declarations
        let paoBarBlue = UIColor(red: 0.024, green: 0.671, blue: 0.925, alpha: 1.000)
        let paoBarGreen = UIColor(red: 0.184, green: 0.886, blue: 0.686, alpha: 1.000)
        let paoTextWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let paoBarGradient = CGGradient(colorsSpace: nil, colors: [paoBarBlue.cgColor, paoBarGreen.cgColor] as CFArray, locations: [0, 1])!

        //// paoPostureBarBaseline Drawing
        context.saveGState()
        context.setAlpha(0.5)

        let paoPostureBarBaselinePath = UIBezierPath()
        paoPostureBarBaselinePath.move(to: CGPoint(x: 10, y: 10))
        paoPostureBarBaselinePath.addLine(to: CGPoint(x: 290, y: 10))
        paoTextWhite.setStroke()
        paoPostureBarBaselinePath.lineWidth = 1
        paoPostureBarBaselinePath.lineCapStyle = .round
        paoPostureBarBaselinePath.lineJoinStyle = .round
        paoPostureBarBaselinePath.stroke()

        context.restoreGState()


        //// paoPostureBarActive
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip paoPostureBarMask
        let paoPostureBarMaskPath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 284, height: 4), cornerRadius: 2)
        var paoPostureBarMaskTransformation = CGAffineTransform.identity
        paoPostureBarMaskTransformation = paoPostureBarMaskTransformation.translatedBy(x: 8, y: 8)
        paoPostureBarMaskTransformation = paoPostureBarMaskTransformation.scaledBy(x: currentPosture, y: 1)
        paoPostureBarMaskPath.apply(paoPostureBarMaskTransformation)
        paoPostureBarMaskPath.addClip()


        //// paoPostureBarColor Drawing
        let paoPostureBarColorPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 300, height: 20))
        context.saveGState()
        paoPostureBarColorPath.addClip()
        context.drawLinearGradient(paoBarGradient, start: CGPoint(x: 0, y: 10), end: CGPoint(x: 300, y: 10), options: [])
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawPaoTitleBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 28), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 28), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 28)


        //// Color Declarations
        let paoBgDark = UIColor(red: 0.016, green: 0.010, blue: 0.147, alpha: 1.000)
        let paoTextWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// paoTitleBar 2
        //// Rectangle 2 Drawing
        context.saveGState()
        context.setAlpha(0.4)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 414, height: 28))
        paoBgDark.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// paoTitle Drawing
        context.saveGState()
        context.setAlpha(0.5)

        let paoTitleRect = CGRect(x: 173, y: 3, width: 68, height: 20.81)
        let paoTitleTextContent = "paÃ³"
        let paoTitleStyle = NSMutableParagraphStyle()
        paoTitleStyle.alignment = .center
        let paoTitleFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Book", size: 20)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: paoTitleStyle]

        let paoTitleTextHeight: CGFloat = paoTitleTextContent.boundingRect(with: CGSize(width: paoTitleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: paoTitleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: paoTitleRect)
        paoTitleTextContent.draw(in: CGRect(x: paoTitleRect.minX, y: paoTitleRect.minY + (paoTitleRect.height - paoTitleTextHeight) / 2, width: paoTitleRect.width, height: paoTitleTextHeight), withAttributes: paoTitleFontAttributes)
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawPaoManSlouching(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 173, height: 226), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 173, height: 226), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 173, y: resizedFrame.height / 226)


        //// Color Declarations
        let paoTextWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 85.14, y: 37.58, width: 32, height: 32))
        paoTextWhite.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 59.3, y: 184.44))
        bezierPath.addCurve(to: CGPoint(x: 78.37, y: 150.73), controlPoint1: CGPoint(x: 69.08, y: 172.46), controlPoint2: CGPoint(x: 75.17, y: 161.12))
        bezierPath.addCurve(to: CGPoint(x: 80.53, y: 140.69), controlPoint1: CGPoint(x: 79.51, y: 147.02), controlPoint2: CGPoint(x: 80.2, y: 143.66))
        bezierPath.addCurve(to: CGPoint(x: 80.75, y: 137.76), controlPoint1: CGPoint(x: 80.66, y: 139.6), controlPoint2: CGPoint(x: 80.72, y: 138.63))
        bezierPath.addCurve(to: CGPoint(x: 80.74, y: 136.38), controlPoint1: CGPoint(x: 80.76, y: 137.17), controlPoint2: CGPoint(x: 80.76, y: 136.71))
        bezierPath.addCurve(to: CGPoint(x: 80.74, y: 136.37), controlPoint1: CGPoint(x: 80.74, y: 136.31), controlPoint2: CGPoint(x: 80.74, y: 136.31))
        bezierPath.addCurve(to: CGPoint(x: 87.87, y: 127.59), controlPoint1: CGPoint(x: 80.29, y: 131.98), controlPoint2: CGPoint(x: 83.48, y: 128.05))
        bezierPath.addCurve(to: CGPoint(x: 96.66, y: 134.72), controlPoint1: CGPoint(x: 92.27, y: 127.13), controlPoint2: CGPoint(x: 96.2, y: 130.32))
        bezierPath.addCurve(to: CGPoint(x: 96.72, y: 135.53), controlPoint1: CGPoint(x: 96.68, y: 134.92), controlPoint2: CGPoint(x: 96.7, y: 135.19))
        bezierPath.addCurve(to: CGPoint(x: 93.66, y: 155.43), controlPoint1: CGPoint(x: 96.97, y: 140.37), controlPoint2: CGPoint(x: 96.21, y: 147.13))
        bezierPath.addCurve(to: CGPoint(x: 71.7, y: 194.56), controlPoint1: CGPoint(x: 89.86, y: 167.81), controlPoint2: CGPoint(x: 82.77, y: 180.98))
        bezierPath.addCurve(to: CGPoint(x: 60.44, y: 195.7), controlPoint1: CGPoint(x: 68.91, y: 197.98), controlPoint2: CGPoint(x: 63.87, y: 198.49))
        bezierPath.addCurve(to: CGPoint(x: 59.3, y: 184.44), controlPoint1: CGPoint(x: 57.02, y: 192.91), controlPoint2: CGPoint(x: 56.51, y: 187.87))
        bezierPath.close()
        paoTextWhite.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 108.28, y: 190.22))
        bezier2Path.addCurve(to: CGPoint(x: 101.43, y: 159.91), controlPoint1: CGPoint(x: 107.19, y: 178.3), controlPoint2: CGPoint(x: 104.77, y: 168.23))
        bezier2Path.addCurve(to: CGPoint(x: 96.56, y: 150.13), controlPoint1: CGPoint(x: 99.86, y: 155.98), controlPoint2: CGPoint(x: 98.19, y: 152.73))
        bezier2Path.addCurve(to: CGPoint(x: 95.11, y: 148), controlPoint1: CGPoint(x: 96.02, y: 149.27), controlPoint2: CGPoint(x: 95.53, y: 148.56))
        bezier2Path.addCurve(to: CGPoint(x: 94.81, y: 147.6), controlPoint1: CGPoint(x: 94.91, y: 147.73), controlPoint2: CGPoint(x: 94.8, y: 147.59))
        bezier2Path.addCurve(to: CGPoint(x: 95.55, y: 136.31), controlPoint1: CGPoint(x: 91.9, y: 144.28), controlPoint2: CGPoint(x: 92.23, y: 139.23))
        bezier2Path.addCurve(to: CGPoint(x: 106.84, y: 137.06), controlPoint1: CGPoint(x: 98.87, y: 133.4), controlPoint2: CGPoint(x: 103.93, y: 133.73))
        bezier2Path.addCurve(to: CGPoint(x: 107.92, y: 138.4), controlPoint1: CGPoint(x: 107.1, y: 137.35), controlPoint2: CGPoint(x: 107.46, y: 137.8))
        bezier2Path.addCurve(to: CGPoint(x: 110.11, y: 141.62), controlPoint1: CGPoint(x: 108.6, y: 139.31), controlPoint2: CGPoint(x: 109.33, y: 140.38))
        bezier2Path.addCurve(to: CGPoint(x: 116.28, y: 153.96), controlPoint1: CGPoint(x: 112.25, y: 145.02), controlPoint2: CGPoint(x: 114.35, y: 149.12))
        bezier2Path.addCurve(to: CGPoint(x: 124.21, y: 188.78), controlPoint1: CGPoint(x: 120.2, y: 163.72), controlPoint2: CGPoint(x: 122.99, y: 175.3))
        bezier2Path.addCurve(to: CGPoint(x: 116.97, y: 197.47), controlPoint1: CGPoint(x: 124.61, y: 193.18), controlPoint2: CGPoint(x: 121.37, y: 197.07))
        bezier2Path.addCurve(to: CGPoint(x: 108.28, y: 190.22), controlPoint1: CGPoint(x: 112.57, y: 197.87), controlPoint2: CGPoint(x: 108.68, y: 194.62))
        bezier2Path.close()
        paoTextWhite.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 103.89, y: 133.47))
        bezier3Path.addCurve(to: CGPoint(x: 87.67, y: 113.24), controlPoint1: CGPoint(x: 95.86, y: 128.34), controlPoint2: CGPoint(x: 90.54, y: 121.41))
        bezier3Path.addCurve(to: CGPoint(x: 86.08, y: 87.79), controlPoint1: CGPoint(x: 84.71, y: 104.8), controlPoint2: CGPoint(x: 84.57, y: 95.99))
        bezier3Path.addCurve(to: CGPoint(x: 87.06, y: 83.58), controlPoint1: CGPoint(x: 86.43, y: 85.88), controlPoint2: CGPoint(x: 86.79, y: 84.45))
        bezier3Path.addCurve(to: CGPoint(x: 93.94, y: 79.95), controlPoint1: CGPoint(x: 87.95, y: 80.68), controlPoint2: CGPoint(x: 91.03, y: 79.06))
        bezier3Path.addCurve(to: CGPoint(x: 97.57, y: 86.83), controlPoint1: CGPoint(x: 96.84, y: 80.85), controlPoint2: CGPoint(x: 98.46, y: 83.93))
        bezier3Path.addCurve(to: CGPoint(x: 97.54, y: 86.94), controlPoint1: CGPoint(x: 97.57, y: 86.83), controlPoint2: CGPoint(x: 97.56, y: 86.87))
        bezier3Path.addCurve(to: CGPoint(x: 97.39, y: 87.5), controlPoint1: CGPoint(x: 97.49, y: 87.09), controlPoint2: CGPoint(x: 97.44, y: 87.28))
        bezier3Path.addCurve(to: CGPoint(x: 96.9, y: 89.77), controlPoint1: CGPoint(x: 97.22, y: 88.15), controlPoint2: CGPoint(x: 97.06, y: 88.92))
        bezier3Path.addCurve(to: CGPoint(x: 98.05, y: 109.6), controlPoint1: CGPoint(x: 95.71, y: 96.25), controlPoint2: CGPoint(x: 95.82, y: 103.23))
        bezier3Path.addCurve(to: CGPoint(x: 109.81, y: 124.19), controlPoint1: CGPoint(x: 100.13, y: 115.5), controlPoint2: CGPoint(x: 103.9, y: 120.42))
        bezier3Path.addCurve(to: CGPoint(x: 111.49, y: 131.79), controlPoint1: CGPoint(x: 112.37, y: 125.83), controlPoint2: CGPoint(x: 113.12, y: 129.23))
        bezier3Path.addCurve(to: CGPoint(x: 103.89, y: 133.47), controlPoint1: CGPoint(x: 109.86, y: 134.35), controlPoint2: CGPoint(x: 106.46, y: 135.1))
        bezier3Path.close()
        paoTextWhite.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 100.21, y: 74.93))
        bezier4Path.addCurve(to: CGPoint(x: 99.05, y: 106.35), controlPoint1: CGPoint(x: 108.76, y: 79.76), controlPoint2: CGPoint(x: 97.86, y: 92.09))
        bezier4Path.addLine(to: CGPoint(x: 99.43, y: 109.62))
        bezier4Path.addLine(to: CGPoint(x: 99.44, y: 109.65))
        bezier4Path.addCurve(to: CGPoint(x: 99.11, y: 108.77), controlPoint1: CGPoint(x: 99.33, y: 109.36), controlPoint2: CGPoint(x: 99.22, y: 109.07))
        bezier4Path.addCurve(to: CGPoint(x: 98.02, y: 89.72), controlPoint1: CGPoint(x: 96.98, y: 102.68), controlPoint2: CGPoint(x: 96.87, y: 95.96))
        bezier4Path.addCurve(to: CGPoint(x: 98.49, y: 87.54), controlPoint1: CGPoint(x: 98.17, y: 88.89), controlPoint2: CGPoint(x: 98.33, y: 88.16))
        bezier4Path.addCurve(to: CGPoint(x: 98.64, y: 86.95), controlPoint1: CGPoint(x: 98.57, y: 87.2), controlPoint2: CGPoint(x: 98.63, y: 87))
        bezier4Path.addCurve(to: CGPoint(x: 94.02, y: 78.19), controlPoint1: CGPoint(x: 99.79, y: 83.25), controlPoint2: CGPoint(x: 97.72, y: 79.33))
        bezier4Path.addCurve(to: CGPoint(x: 85.27, y: 82.81), controlPoint1: CGPoint(x: 90.33, y: 77.05), controlPoint2: CGPoint(x: 86.41, y: 79.12))
        bezier4Path.addCurve(to: CGPoint(x: 84.91, y: 84.12), controlPoint1: CGPoint(x: 85.18, y: 83.1), controlPoint2: CGPoint(x: 85.06, y: 83.53))
        bezier4Path.addCurve(to: CGPoint(x: 84.25, y: 87.19), controlPoint1: CGPoint(x: 84.68, y: 85.03), controlPoint2: CGPoint(x: 84.46, y: 86.05))
        bezier4Path.addCurve(to: CGPoint(x: 85.54, y: 112.34), controlPoint1: CGPoint(x: 82.76, y: 95.28), controlPoint2: CGPoint(x: 82.83, y: 103.95))
        bezier4Path.addCurve(to: CGPoint(x: 85.9, y: 113.41), controlPoint1: CGPoint(x: 85.66, y: 112.7), controlPoint2: CGPoint(x: 85.78, y: 113.05))
        bezier4Path.addCurve(to: CGPoint(x: 102.73, y: 134.4), controlPoint1: CGPoint(x: 88.88, y: 121.89), controlPoint2: CGPoint(x: 94.4, y: 129.09))
        bezier4Path.addCurve(to: CGPoint(x: 93, y: 143), controlPoint1: CGPoint(x: 103.01, y: 134.58), controlPoint2: CGPoint(x: 102.51, y: 149.51))
        bezier4Path.addCurve(to: CGPoint(x: 73.98, y: 114.35), controlPoint1: CGPoint(x: 77.19, y: 132.19), controlPoint2: CGPoint(x: 73.93, y: 128.82))
        bezier4Path.addCurve(to: CGPoint(x: 74.33, y: 104.07), controlPoint1: CGPoint(x: 73.99, y: 111.43), controlPoint2: CGPoint(x: 74.13, y: 108.05))
        bezier4Path.addCurve(to: CGPoint(x: 100.21, y: 74.93), controlPoint1: CGPoint(x: 75.55, y: 80.37), controlPoint2: CGPoint(x: 91.67, y: 70.1))
        bezier4Path.close()
        paoTextWhite.setFill()
        bezier4Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawPaoManNotSlouching(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 173, height: 226), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 173, height: 226), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 173, y: resizedFrame.height / 226)


        //// Color Declarations
        let paoTextWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 71.95, y: 37.04, width: 32, height: 32))
        paoTextWhite.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 59.3, y: 184.44))
        bezierPath.addCurve(to: CGPoint(x: 78.37, y: 150.73), controlPoint1: CGPoint(x: 69.08, y: 172.46), controlPoint2: CGPoint(x: 75.17, y: 161.12))
        bezierPath.addCurve(to: CGPoint(x: 80.53, y: 140.69), controlPoint1: CGPoint(x: 79.51, y: 147.02), controlPoint2: CGPoint(x: 80.2, y: 143.66))
        bezierPath.addCurve(to: CGPoint(x: 80.75, y: 137.76), controlPoint1: CGPoint(x: 80.66, y: 139.6), controlPoint2: CGPoint(x: 80.72, y: 138.63))
        bezierPath.addCurve(to: CGPoint(x: 80.74, y: 136.38), controlPoint1: CGPoint(x: 80.76, y: 137.17), controlPoint2: CGPoint(x: 80.76, y: 136.71))
        bezierPath.addCurve(to: CGPoint(x: 80.74, y: 136.37), controlPoint1: CGPoint(x: 80.74, y: 136.31), controlPoint2: CGPoint(x: 80.74, y: 136.31))
        bezierPath.addCurve(to: CGPoint(x: 87.33, y: 129.77), controlPoint1: CGPoint(x: 80.29, y: 131.98), controlPoint2: CGPoint(x: 82.93, y: 130.22))
        bezierPath.addCurve(to: CGPoint(x: 96.66, y: 134.72), controlPoint1: CGPoint(x: 91.72, y: 129.31), controlPoint2: CGPoint(x: 96.2, y: 130.32))
        bezierPath.addCurve(to: CGPoint(x: 96.72, y: 135.53), controlPoint1: CGPoint(x: 96.68, y: 134.92), controlPoint2: CGPoint(x: 96.7, y: 135.19))
        bezierPath.addCurve(to: CGPoint(x: 93.66, y: 155.43), controlPoint1: CGPoint(x: 96.97, y: 140.37), controlPoint2: CGPoint(x: 96.21, y: 147.13))
        bezierPath.addCurve(to: CGPoint(x: 71.7, y: 194.56), controlPoint1: CGPoint(x: 89.86, y: 167.81), controlPoint2: CGPoint(x: 82.77, y: 180.98))
        bezierPath.addCurve(to: CGPoint(x: 60.44, y: 195.7), controlPoint1: CGPoint(x: 68.91, y: 197.98), controlPoint2: CGPoint(x: 63.87, y: 198.49))
        bezierPath.addCurve(to: CGPoint(x: 59.3, y: 184.44), controlPoint1: CGPoint(x: 57.02, y: 192.91), controlPoint2: CGPoint(x: 56.51, y: 187.87))
        bezierPath.close()
        paoTextWhite.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 108.28, y: 190.22))
        bezier2Path.addCurve(to: CGPoint(x: 101.43, y: 159.91), controlPoint1: CGPoint(x: 107.19, y: 178.3), controlPoint2: CGPoint(x: 104.77, y: 168.23))
        bezier2Path.addCurve(to: CGPoint(x: 96.56, y: 150.13), controlPoint1: CGPoint(x: 99.86, y: 155.98), controlPoint2: CGPoint(x: 98.19, y: 152.73))
        bezier2Path.addCurve(to: CGPoint(x: 95.11, y: 148), controlPoint1: CGPoint(x: 96.02, y: 149.27), controlPoint2: CGPoint(x: 95.53, y: 148.56))
        bezier2Path.addCurve(to: CGPoint(x: 94.81, y: 147.6), controlPoint1: CGPoint(x: 94.91, y: 147.73), controlPoint2: CGPoint(x: 94.8, y: 147.59))
        bezier2Path.addCurve(to: CGPoint(x: 95.55, y: 136.31), controlPoint1: CGPoint(x: 91.9, y: 144.28), controlPoint2: CGPoint(x: 92.23, y: 139.23))
        bezier2Path.addCurve(to: CGPoint(x: 106.84, y: 137.06), controlPoint1: CGPoint(x: 98.87, y: 133.4), controlPoint2: CGPoint(x: 103.93, y: 133.73))
        bezier2Path.addCurve(to: CGPoint(x: 107.92, y: 138.4), controlPoint1: CGPoint(x: 107.1, y: 137.35), controlPoint2: CGPoint(x: 107.46, y: 137.8))
        bezier2Path.addCurve(to: CGPoint(x: 110.11, y: 141.62), controlPoint1: CGPoint(x: 108.6, y: 139.31), controlPoint2: CGPoint(x: 109.33, y: 140.38))
        bezier2Path.addCurve(to: CGPoint(x: 116.28, y: 153.96), controlPoint1: CGPoint(x: 112.25, y: 145.02), controlPoint2: CGPoint(x: 114.35, y: 149.12))
        bezier2Path.addCurve(to: CGPoint(x: 124.21, y: 188.78), controlPoint1: CGPoint(x: 120.2, y: 163.72), controlPoint2: CGPoint(x: 122.99, y: 175.3))
        bezier2Path.addCurve(to: CGPoint(x: 116.97, y: 197.47), controlPoint1: CGPoint(x: 124.61, y: 193.18), controlPoint2: CGPoint(x: 121.37, y: 197.07))
        bezier2Path.addCurve(to: CGPoint(x: 108.28, y: 190.22), controlPoint1: CGPoint(x: 112.57, y: 197.87), controlPoint2: CGPoint(x: 108.68, y: 194.62))
        bezier2Path.close()
        paoTextWhite.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 99.54, y: 133.14))
        bezier3Path.addCurve(to: CGPoint(x: 83.32, y: 112.91), controlPoint1: CGPoint(x: 91.51, y: 128.01), controlPoint2: CGPoint(x: 86.19, y: 121.08))
        bezier3Path.addCurve(to: CGPoint(x: 81.73, y: 87.46), controlPoint1: CGPoint(x: 80.36, y: 104.47), controlPoint2: CGPoint(x: 80.22, y: 95.66))
        bezier3Path.addCurve(to: CGPoint(x: 82.71, y: 83.26), controlPoint1: CGPoint(x: 82.08, y: 85.55), controlPoint2: CGPoint(x: 82.44, y: 84.12))
        bezier3Path.addCurve(to: CGPoint(x: 89.58, y: 79.62), controlPoint1: CGPoint(x: 83.6, y: 80.35), controlPoint2: CGPoint(x: 86.68, y: 78.73))
        bezier3Path.addCurve(to: CGPoint(x: 93.21, y: 86.5), controlPoint1: CGPoint(x: 92.49, y: 80.52), controlPoint2: CGPoint(x: 94.11, y: 83.6))
        bezier3Path.addCurve(to: CGPoint(x: 93.18, y: 86.61), controlPoint1: CGPoint(x: 93.22, y: 86.5), controlPoint2: CGPoint(x: 93.2, y: 86.54))
        bezier3Path.addCurve(to: CGPoint(x: 93.04, y: 87.17), controlPoint1: CGPoint(x: 93.14, y: 86.76), controlPoint2: CGPoint(x: 93.09, y: 86.95))
        bezier3Path.addCurve(to: CGPoint(x: 92.55, y: 89.45), controlPoint1: CGPoint(x: 92.87, y: 87.82), controlPoint2: CGPoint(x: 92.7, y: 88.59))
        bezier3Path.addCurve(to: CGPoint(x: 93.7, y: 109.27), controlPoint1: CGPoint(x: 91.36, y: 95.92), controlPoint2: CGPoint(x: 91.46, y: 102.9))
        bezier3Path.addCurve(to: CGPoint(x: 105.46, y: 123.86), controlPoint1: CGPoint(x: 95.77, y: 115.17), controlPoint2: CGPoint(x: 99.55, y: 120.09))
        bezier3Path.addCurve(to: CGPoint(x: 107.14, y: 131.46), controlPoint1: CGPoint(x: 108.02, y: 125.5), controlPoint2: CGPoint(x: 108.77, y: 128.9))
        bezier3Path.addCurve(to: CGPoint(x: 99.54, y: 133.14), controlPoint1: CGPoint(x: 105.5, y: 134.02), controlPoint2: CGPoint(x: 102.1, y: 134.77))
        bezier3Path.close()
        paoTextWhite.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 88.5, y: 73.19))
        bezier4Path.addCurve(to: CGPoint(x: 99.05, y: 106.35), controlPoint1: CGPoint(x: 96.91, y: 73.46), controlPoint2: CGPoint(x: 97.86, y: 92.09))
        bezier4Path.addLine(to: CGPoint(x: 100.97, y: 118.32))
        bezier4Path.addCurve(to: CGPoint(x: 95.11, y: 108.77), controlPoint1: CGPoint(x: 98.28, y: 115.54), controlPoint2: CGPoint(x: 96.37, y: 112.35))
        bezier4Path.addCurve(to: CGPoint(x: 94.02, y: 89.72), controlPoint1: CGPoint(x: 92.98, y: 102.68), controlPoint2: CGPoint(x: 92.87, y: 95.96))
        bezier4Path.addCurve(to: CGPoint(x: 94.49, y: 87.54), controlPoint1: CGPoint(x: 94.17, y: 88.89), controlPoint2: CGPoint(x: 94.33, y: 88.16))
        bezier4Path.addCurve(to: CGPoint(x: 94.64, y: 86.95), controlPoint1: CGPoint(x: 94.57, y: 87.2), controlPoint2: CGPoint(x: 94.63, y: 87))
        bezier4Path.addCurve(to: CGPoint(x: 90.02, y: 78.19), controlPoint1: CGPoint(x: 95.79, y: 83.25), controlPoint2: CGPoint(x: 93.72, y: 79.33))
        bezier4Path.addCurve(to: CGPoint(x: 81.27, y: 82.81), controlPoint1: CGPoint(x: 86.33, y: 77.05), controlPoint2: CGPoint(x: 82.41, y: 79.12))
        bezier4Path.addCurve(to: CGPoint(x: 80.91, y: 84.12), controlPoint1: CGPoint(x: 81.18, y: 83.1), controlPoint2: CGPoint(x: 81.06, y: 83.53))
        bezier4Path.addCurve(to: CGPoint(x: 80.25, y: 87.19), controlPoint1: CGPoint(x: 80.68, y: 85.03), controlPoint2: CGPoint(x: 80.46, y: 86.05))
        bezier4Path.addCurve(to: CGPoint(x: 81.09, y: 110.83), controlPoint1: CGPoint(x: 78.85, y: 94.8), controlPoint2: CGPoint(x: 78.83, y: 102.91))
        bezier4Path.addCurve(to: CGPoint(x: 81.9, y: 113.41), controlPoint1: CGPoint(x: 81.33, y: 111.7), controlPoint2: CGPoint(x: 81.6, y: 112.55))
        bezier4Path.addCurve(to: CGPoint(x: 98.73, y: 134.4), controlPoint1: CGPoint(x: 84.88, y: 121.89), controlPoint2: CGPoint(x: 90.4, y: 129.09))
        bezier4Path.addCurve(to: CGPoint(x: 104.45, y: 139.32), controlPoint1: CGPoint(x: 99.3, y: 134.77), controlPoint2: CGPoint(x: 104.36, y: 137.04))
        bezier4Path.addCurve(to: CGPoint(x: 93, y: 143), controlPoint1: CGPoint(x: 104.6, y: 143.09), controlPoint2: CGPoint(x: 98.81, y: 146.97))
        bezier4Path.addCurve(to: CGPoint(x: 73.98, y: 114.35), controlPoint1: CGPoint(x: 77.19, y: 132.19), controlPoint2: CGPoint(x: 73.93, y: 128.82))
        bezier4Path.addCurve(to: CGPoint(x: 74.33, y: 104.07), controlPoint1: CGPoint(x: 73.99, y: 111.43), controlPoint2: CGPoint(x: 74.13, y: 108.05))
        bezier4Path.addCurve(to: CGPoint(x: 88.5, y: 73.19), controlPoint1: CGPoint(x: 75.55, y: 80.37), controlPoint2: CGPoint(x: 80.08, y: 72.92))
        bezier4Path.close()
        paoTextWhite.setFill()
        bezier4Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawPaoSittingGoal(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 180), resizing: ResizingBehavior = .aspectFit, postureGoalPercentage: CGFloat = 0.864) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 180), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 180)


        //// Color Declarations
        let paoEggWater = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let paoBarBlue = UIColor(red: 0.024, green: 0.671, blue: 0.925, alpha: 1.000)
        let paoBarGreen = UIColor(red: 0.184, green: 0.886, blue: 0.686, alpha: 1.000)
        let paoTextWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let paoBarGradient = CGGradient(colorsSpace: nil, colors: [paoBarBlue.cgColor, paoBarGreen.cgColor] as CFArray, locations: [0, 1])!

        //// Variable Declarations
        let postGoalAngle: CGFloat = -141 - postureGoalPercentage * 260
        let condColor = UIColor(red: 121.0 / 255.0 * postureGoalPercentage + 231.0 / 255.0 * (1 - postureGoalPercentage), green: 191.0 / 255.0 * postureGoalPercentage + 121.0 / 255.0 * (1 - postureGoalPercentage), blue: 231.0 / 255.0 * postureGoalPercentage + 121.0 / 255.0 * (1 - postureGoalPercentage), alpha: 1)

        //// postureGoalBar 2 Drawing
        context.saveGState()
        context.setAlpha(0.5)

        let postureGoalBar2Rect = CGRect(x: 10, y: 10, width: 160, height: 160)
        let postureGoalBar2Path = UIBezierPath()
        postureGoalBar2Path.addArc(withCenter: CGPoint(x: postureGoalBar2Rect.midX, y: postureGoalBar2Rect.midY), radius: postureGoalBar2Rect.width / 2, startAngle: 140 * CGFloat.pi/180, endAngle: 400 * CGFloat.pi/180, clockwise: true)

        paoEggWater.setStroke()
        postureGoalBar2Path.lineWidth = 2
        postureGoalBar2Path.lineCapStyle = .round
        postureGoalBar2Path.lineJoinStyle = .round
        postureGoalBar2Path.stroke()

        context.restoreGState()


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 180, height: 180))
        context.saveGState()
        rectanglePath.addClip()
        context.drawLinearGradient(paoBarGradient, start: CGPoint(x: 0, y: 90), end: CGPoint(x: 180, y: 90), options: [])
        context.restoreGState()


        //// postureGoalBar Drawing
        context.saveGState()
        context.setBlendMode(.destinationIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let postureGoalBarRect = CGRect(x: 10, y: 10, width: 160, height: 160)
        let postureGoalBarPath = UIBezierPath()
        postureGoalBarPath.addArc(withCenter: CGPoint(x: postureGoalBarRect.midX, y: postureGoalBarRect.midY), radius: postureGoalBarRect.width / 2, startAngle: 140 * CGFloat.pi/180, endAngle: -postGoalAngle * CGFloat.pi/180, clockwise: true)

        condColor.setStroke()
        postureGoalBarPath.lineWidth = 6
        postureGoalBarPath.lineCapStyle = .round
        postureGoalBarPath.lineJoinStyle = .round
        postureGoalBarPath.stroke()

        context.endTransparencyLayer()
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// sittingPerson
        context.saveGState()
        context.translateBy(x: 55.01, y: 59.81)
        context.scaleBy(x: 0.75, y: 0.75)



        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 18.87, y: 0, width: 23, height: 23))
        paoTextWhite.setFill()
        oval2Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 28.38, y: 26.16))
        bezier4Path.addCurve(to: CGPoint(x: 18.08, y: 29.32), controlPoint1: CGPoint(x: 24.24, y: 25.62), controlPoint2: CGPoint(x: 20.25, y: 25.67))
        bezier4Path.addCurve(to: CGPoint(x: 13.01, y: 54.19), controlPoint1: CGPoint(x: 15.91, y: 32.98), controlPoint2: CGPoint(x: 13.01, y: 54.19))
        bezier4Path.addCurve(to: CGPoint(x: 12.61, y: 73.17), controlPoint1: CGPoint(x: 13.01, y: 54.19), controlPoint2: CGPoint(x: 10.85, y: 66.63))
        bezier4Path.addCurve(to: CGPoint(x: 25.79, y: 81.52), controlPoint1: CGPoint(x: 14.37, y: 79.71), controlPoint2: CGPoint(x: 17.38, y: 81.02))
        bezier4Path.addCurve(to: CGPoint(x: 45.66, y: 82.7), controlPoint1: CGPoint(x: 34.21, y: 82.02), controlPoint2: CGPoint(x: 45.66, y: 82.7))
        bezier4Path.addLine(to: CGPoint(x: 43.69, y: 104.78))
        bezier4Path.addCurve(to: CGPoint(x: 48.48, y: 111.43), controlPoint1: CGPoint(x: 43.69, y: 104.78), controlPoint2: CGPoint(x: 43, y: 110.23))
        bezier4Path.addCurve(to: CGPoint(x: 55.05, y: 107.05), controlPoint1: CGPoint(x: 53.97, y: 112.63), controlPoint2: CGPoint(x: 55.05, y: 107.05))
        bezier4Path.addLine(to: CGPoint(x: 58.74, y: 80.81))
        bezier4Path.addCurve(to: CGPoint(x: 53.27, y: 71.08), controlPoint1: CGPoint(x: 58.74, y: 80.81), controlPoint2: CGPoint(x: 59.37, y: 73.01))
        bezier4Path.addCurve(to: CGPoint(x: 34.09, y: 68.61), controlPoint1: CGPoint(x: 47.18, y: 69.14), controlPoint2: CGPoint(x: 36.25, y: 68.93))
        bezier4Path.addCurve(to: CGPoint(x: 33.67, y: 64.48), controlPoint1: CGPoint(x: 33.46, y: 68.18), controlPoint2: CGPoint(x: 33.67, y: 64.48))
        bezier4Path.addLine(to: CGPoint(x: 35.06, y: 51.77))
        bezier4Path.addCurve(to: CGPoint(x: 33.06, y: 50.35), controlPoint1: CGPoint(x: 35.06, y: 51.77), controlPoint2: CGPoint(x: 33.54, y: 50.69))
        bezier4Path.addCurve(to: CGPoint(x: 27.52, y: 44.45), controlPoint1: CGPoint(x: 30.72, y: 48.7), controlPoint2: CGPoint(x: 29.1, y: 46.09))
        bezier4Path.addCurve(to: CGPoint(x: 24.5, y: 39.54), controlPoint1: CGPoint(x: 25.95, y: 42.82), controlPoint2: CGPoint(x: 23.99, y: 40.21))
        bezier4Path.addCurve(to: CGPoint(x: 34.62, y: 50.11), controlPoint1: CGPoint(x: 25.01, y: 38.86), controlPoint2: CGPoint(x: 31.39, y: 47.77))
        bezier4Path.addCurve(to: CGPoint(x: 46.02, y: 53.91), controlPoint1: CGPoint(x: 37.86, y: 52.46), controlPoint2: CGPoint(x: 39.1, y: 53.58))
        bezier4Path.addCurve(to: CGPoint(x: 62.14, y: 55.62), controlPoint1: CGPoint(x: 52.94, y: 54.25), controlPoint2: CGPoint(x: 59.78, y: 55.57))
        bezier4Path.addCurve(to: CGPoint(x: 67.78, y: 51.86), controlPoint1: CGPoint(x: 64.49, y: 55.67), controlPoint2: CGPoint(x: 67.83, y: 53.7))
        bezier4Path.addCurve(to: CGPoint(x: 63.22, y: 46.34), controlPoint1: CGPoint(x: 67.72, y: 50.01), controlPoint2: CGPoint(x: 67.49, y: 46.92))
        bezier4Path.addCurve(to: CGPoint(x: 47.84, y: 44.73), controlPoint1: CGPoint(x: 58.95, y: 45.75), controlPoint2: CGPoint(x: 53.57, y: 45.2))
        bezier4Path.addCurve(to: CGPoint(x: 39.32, y: 41.6), controlPoint1: CGPoint(x: 42.11, y: 44.26), controlPoint2: CGPoint(x: 42.91, y: 44.39))
        bezier4Path.addCurve(to: CGPoint(x: 31.07, y: 32.73), controlPoint1: CGPoint(x: 35.73, y: 38.8), controlPoint2: CGPoint(x: 31.07, y: 32.73))
        bezier4Path.addCurve(to: CGPoint(x: 31.55, y: 32.03), controlPoint1: CGPoint(x: 31.07, y: 32.73), controlPoint2: CGPoint(x: 30.88, y: 31.91))
        bezier4Path.addCurve(to: CGPoint(x: 37.84, y: 38.74), controlPoint1: CGPoint(x: 32.23, y: 32.16), controlPoint2: CGPoint(x: 37.84, y: 38.74))
        bezier4Path.addCurve(to: CGPoint(x: 37.16, y: 31.1), controlPoint1: CGPoint(x: 37.84, y: 38.74), controlPoint2: CGPoint(x: 39.75, y: 34.36))
        bezier4Path.addCurve(to: CGPoint(x: 28.38, y: 26.16), controlPoint1: CGPoint(x: 34.57, y: 27.84), controlPoint2: CGPoint(x: 32.51, y: 26.69))
        bezier4Path.close()
        paoTextWhite.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 39.01, y: 37.77))
        bezier5Path.addCurve(to: CGPoint(x: 47.61, y: 42.62), controlPoint1: CGPoint(x: 39.01, y: 37.77), controlPoint2: CGPoint(x: 40.75, y: 42.06))
        bezier5Path.addCurve(to: CGPoint(x: 63.86, y: 43.98), controlPoint1: CGPoint(x: 54.48, y: 43.18), controlPoint2: CGPoint(x: 60.03, y: 43.92))
        bezier5Path.addCurve(to: CGPoint(x: 69.56, y: 47.45), controlPoint1: CGPoint(x: 67.7, y: 44.04), controlPoint2: CGPoint(x: 69.3, y: 46.16))
        bezier5Path.addCurve(to: CGPoint(x: 68.96, y: 50.93), controlPoint1: CGPoint(x: 69.81, y: 48.74), controlPoint2: CGPoint(x: 69.38, y: 50.12))
        bezier5Path.addCurve(to: CGPoint(x: 65.6, y: 45.86), controlPoint1: CGPoint(x: 68.88, y: 48.9), controlPoint2: CGPoint(x: 67.49, y: 46.22))
        bezier5Path.addCurve(to: CGPoint(x: 48.67, y: 43.92), controlPoint1: CGPoint(x: 63.72, y: 45.5), controlPoint2: CGPoint(x: 55.01, y: 44.48))
        bezier5Path.addCurve(to: CGPoint(x: 38.86, y: 39.67), controlPoint1: CGPoint(x: 42.33, y: 43.36), controlPoint2: CGPoint(x: 41.49, y: 42.76))
        bezier5Path.addCurve(to: CGPoint(x: 39.01, y: 37.77), controlPoint1: CGPoint(x: 38.77, y: 38.8), controlPoint2: CGPoint(x: 39.01, y: 37.77))
        bezier5Path.close()
        paoTextWhite.setFill()
        bezier5Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 2.77, y: 46.19))
        bezier7Path.addCurve(to: CGPoint(x: 7.16, y: 60.19), controlPoint1: CGPoint(x: 4.66, y: 50.06), controlPoint2: CGPoint(x: 6.11, y: 54.79))
        bezier7Path.addCurve(to: CGPoint(x: 9, y: 75.42), controlPoint1: CGPoint(x: 8.11, y: 65.03), controlPoint2: CGPoint(x: 8.7, y: 70.2))
        bezier7Path.addCurve(to: CGPoint(x: 9.31, y: 83.11), controlPoint1: CGPoint(x: 9.21, y: 78.88), controlPoint2: CGPoint(x: 9.31, y: 83.11))
        bezier7Path.addLine(to: CGPoint(x: 38.53, y: 83.17))
        bezier7Path.addCurve(to: CGPoint(x: 39.98, y: 84.63), controlPoint1: CGPoint(x: 39.34, y: 83.18), controlPoint2: CGPoint(x: 39.99, y: 83.83))
        bezier7Path.addCurve(to: CGPoint(x: 38.52, y: 86.08), controlPoint1: CGPoint(x: 39.98, y: 85.44), controlPoint2: CGPoint(x: 39.32, y: 86.08))
        bezier7Path.addLine(to: CGPoint(x: 7.76, y: 85.87))
        bezier7Path.addCurve(to: CGPoint(x: 6.03, y: 84.71), controlPoint1: CGPoint(x: 6.94, y: 85.87), controlPoint2: CGPoint(x: 6.03, y: 84.89))
        bezier7Path.addCurve(to: CGPoint(x: 6.09, y: 75.59), controlPoint1: CGPoint(x: 6.06, y: 82.56), controlPoint2: CGPoint(x: 6.29, y: 78.97))
        bezier7Path.addCurve(to: CGPoint(x: 4.3, y: 60.74), controlPoint1: CGPoint(x: 5.8, y: 70.49), controlPoint2: CGPoint(x: 5.22, y: 65.44))
        bezier7Path.addCurve(to: CGPoint(x: 0.15, y: 47.47), controlPoint1: CGPoint(x: 3.29, y: 55.57), controlPoint2: CGPoint(x: 1.92, y: 51.08))
        bezier7Path.addCurve(to: CGPoint(x: 0.82, y: 45.52), controlPoint1: CGPoint(x: -0.21, y: 46.75), controlPoint2: CGPoint(x: 0.1, y: 45.88))
        bezier7Path.addCurve(to: CGPoint(x: 2.77, y: 46.19), controlPoint1: CGPoint(x: 1.54, y: 45.17), controlPoint2: CGPoint(x: 2.41, y: 45.47))
        bezier7Path.close()
        paoTextWhite.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 18.27, y: 87.15))
        bezier8Path.addLine(to: CGPoint(x: 27.01, y: 87.17))
        bezier8Path.addLine(to: CGPoint(x: 26.98, y: 89.31))
        bezier8Path.addLine(to: CGPoint(x: 24.48, y: 89.45))
        bezier8Path.addCurve(to: CGPoint(x: 24.38, y: 99.83), controlPoint1: CGPoint(x: 24.48, y: 89.45), controlPoint2: CGPoint(x: 24.34, y: 96.92))
        bezier8Path.addCurve(to: CGPoint(x: 36.09, y: 104.67), controlPoint1: CGPoint(x: 32.23, y: 99.93), controlPoint2: CGPoint(x: 35.51, y: 103.82))
        bezier8Path.addCurve(to: CGPoint(x: 34.29, y: 105.69), controlPoint1: CGPoint(x: 36.67, y: 105.52), controlPoint2: CGPoint(x: 36.05, y: 107.76))
        bezier8Path.addCurve(to: CGPoint(x: 23.08, y: 102.39), controlPoint1: CGPoint(x: 32.52, y: 103.62), controlPoint2: CGPoint(x: 31.73, y: 102.64))
        bezier8Path.addCurve(to: CGPoint(x: 12.11, y: 104.37), controlPoint1: CGPoint(x: 14.44, y: 102.15), controlPoint2: CGPoint(x: 13.57, y: 103.56))
        bezier8Path.addCurve(to: CGPoint(x: 8.83, y: 105.63), controlPoint1: CGPoint(x: 10.65, y: 105.18), controlPoint2: CGPoint(x: 9.4, y: 108.07))
        bezier8Path.addCurve(to: CGPoint(x: 21.18, y: 99.71), controlPoint1: CGPoint(x: 9.01, y: 103.23), controlPoint2: CGPoint(x: 13.22, y: 100.15))
        bezier8Path.addCurve(to: CGPoint(x: 21.09, y: 89.24), controlPoint1: CGPoint(x: 21.09, y: 97.94), controlPoint2: CGPoint(x: 21.09, y: 89.24))
        bezier8Path.addLine(to: CGPoint(x: 18.32, y: 89.17))
        bezier8Path.addLine(to: CGPoint(x: 18.27, y: 87.15))
        bezier8Path.close()
        paoTextWhite.setFill()
        bezier8Path.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 10.25, y: 107.05, width: 4, height: 4))
        paoTextWhite.setFill()
        oval3Path.fill()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 31.07, y: 106.98, width: 4, height: 4))
        paoTextWhite.setFill()
        oval4Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 98.35, y: 30.84))
        bezier9Path.addLine(to: CGPoint(x: 88.95, y: 58.25))
        bezier9Path.addCurve(to: CGPoint(x: 87.32, y: 59.05), controlPoint1: CGPoint(x: 88.72, y: 58.92), controlPoint2: CGPoint(x: 87.99, y: 59.28))
        bezier9Path.addCurve(to: CGPoint(x: 86.52, y: 57.43), controlPoint1: CGPoint(x: 86.65, y: 58.82), controlPoint2: CGPoint(x: 86.29, y: 58.1))
        bezier9Path.addLine(to: CGPoint(x: 95.92, y: 30.01))
        bezier9Path.addCurve(to: CGPoint(x: 97.55, y: 29.22), controlPoint1: CGPoint(x: 96.15, y: 29.34), controlPoint2: CGPoint(x: 96.88, y: 28.99))
        bezier9Path.addCurve(to: CGPoint(x: 98.35, y: 30.84), controlPoint1: CGPoint(x: 98.22, y: 29.44), controlPoint2: CGPoint(x: 98.58, y: 30.17))
        bezier9Path.close()
        paoTextWhite.setFill()
        bezier9Path.fill()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 91.99, y: 59.39))
        bezier10Path.addLine(to: CGPoint(x: 62.51, y: 59.34))
        bezier10Path.addCurve(to: CGPoint(x: 61.23, y: 58.06), controlPoint1: CGPoint(x: 61.8, y: 59.34), controlPoint2: CGPoint(x: 61.23, y: 58.77))
        bezier10Path.addCurve(to: CGPoint(x: 62.52, y: 56.78), controlPoint1: CGPoint(x: 61.23, y: 57.35), controlPoint2: CGPoint(x: 61.81, y: 56.78))
        bezier10Path.addLine(to: CGPoint(x: 91.99, y: 56.82))
        bezier10Path.addCurve(to: CGPoint(x: 93.28, y: 58.11), controlPoint1: CGPoint(x: 92.7, y: 56.83), controlPoint2: CGPoint(x: 93.28, y: 57.4))
        bezier10Path.addCurve(to: CGPoint(x: 91.99, y: 59.39), controlPoint1: CGPoint(x: 93.28, y: 58.82), controlPoint2: CGPoint(x: 92.7, y: 59.39))
        bezier10Path.close()
        paoTextWhite.setFill()
        bezier10Path.fill()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 60.44, y: 109.53))
        bezier11Path.addLine(to: CGPoint(x: 60.51, y: 62.94))
        bezier11Path.addCurve(to: CGPoint(x: 62.06, y: 61.41), controlPoint1: CGPoint(x: 60.51, y: 62.1), controlPoint2: CGPoint(x: 61.21, y: 61.41))
        bezier11Path.addCurve(to: CGPoint(x: 63.6, y: 62.95), controlPoint1: CGPoint(x: 62.91, y: 61.41), controlPoint2: CGPoint(x: 63.6, y: 62.1))
        bezier11Path.addLine(to: CGPoint(x: 63.53, y: 109.53))
        bezier11Path.addCurve(to: CGPoint(x: 61.98, y: 111.07), controlPoint1: CGPoint(x: 63.53, y: 110.38), controlPoint2: CGPoint(x: 62.83, y: 111.07))
        bezier11Path.addCurve(to: CGPoint(x: 60.44, y: 109.53), controlPoint1: CGPoint(x: 61.13, y: 111.07), controlPoint2: CGPoint(x: 60.44, y: 110.38))
        bezier11Path.close()
        paoTextWhite.setFill()
        bezier11Path.fill()


        //// Bezier 12 Drawing
        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: 44.49, y: 61.01))
        bezier12Path.addLine(to: CGPoint(x: 96.57, y: 60.81))
        bezier12Path.addCurve(to: CGPoint(x: 98.64, y: 62.86), controlPoint1: CGPoint(x: 97.71, y: 60.81), controlPoint2: CGPoint(x: 98.64, y: 61.72))
        bezier12Path.addCurve(to: CGPoint(x: 96.59, y: 64.91), controlPoint1: CGPoint(x: 98.64, y: 63.99), controlPoint2: CGPoint(x: 97.73, y: 64.91))
        bezier12Path.addLine(to: CGPoint(x: 44.5, y: 65.11))
        bezier12Path.addCurve(to: CGPoint(x: 42.44, y: 63.07), controlPoint1: CGPoint(x: 43.37, y: 65.12), controlPoint2: CGPoint(x: 42.44, y: 64.2))
        bezier12Path.addCurve(to: CGPoint(x: 44.49, y: 61.01), controlPoint1: CGPoint(x: 42.43, y: 61.94), controlPoint2: CGPoint(x: 43.35, y: 61.01))
        bezier12Path.close()
        paoTextWhite.setFill()
        bezier12Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawPaoMovingGoal(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 180), resizing: ResizingBehavior = .aspectFit, postureGoalPercentage: CGFloat = 0.864) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 180), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 180)


        //// Color Declarations
        let paoEggWater = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let paoBarBlue = UIColor(red: 0.024, green: 0.671, blue: 0.925, alpha: 1.000)
        let paoBarGreen = UIColor(red: 0.184, green: 0.886, blue: 0.686, alpha: 1.000)
        let paoTextWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let paoBarGradient = CGGradient(colorsSpace: nil, colors: [paoBarBlue.cgColor, paoBarGreen.cgColor] as CFArray, locations: [0, 1])!

        //// Variable Declarations
        let postGoalAngle: CGFloat = -141 - postureGoalPercentage * 260
        let condColor = UIColor(red: 121.0 / 255.0 * postureGoalPercentage + 231.0 / 255.0 * (1 - postureGoalPercentage), green: 191.0 / 255.0 * postureGoalPercentage + 121.0 / 255.0 * (1 - postureGoalPercentage), blue: 231.0 / 255.0 * postureGoalPercentage + 121.0 / 255.0 * (1 - postureGoalPercentage), alpha: 1)

        //// postureGoalBar 2 Drawing
        context.saveGState()
        context.setAlpha(0.5)

        let postureGoalBar2Rect = CGRect(x: 10, y: 10, width: 160, height: 160)
        let postureGoalBar2Path = UIBezierPath()
        postureGoalBar2Path.addArc(withCenter: CGPoint(x: postureGoalBar2Rect.midX, y: postureGoalBar2Rect.midY), radius: postureGoalBar2Rect.width / 2, startAngle: 140 * CGFloat.pi/180, endAngle: 400 * CGFloat.pi/180, clockwise: true)

        paoEggWater.setStroke()
        postureGoalBar2Path.lineWidth = 2
        postureGoalBar2Path.lineCapStyle = .round
        postureGoalBar2Path.lineJoinStyle = .round
        postureGoalBar2Path.stroke()

        context.restoreGState()


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 180, height: 180))
        context.saveGState()
        rectanglePath.addClip()
        context.drawLinearGradient(paoBarGradient, start: CGPoint(x: 0, y: 90), end: CGPoint(x: 180, y: 90), options: [])
        context.restoreGState()


        //// postureGoalBar Drawing
        context.saveGState()
        context.setBlendMode(.destinationIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let postureGoalBarRect = CGRect(x: 10, y: 10, width: 160, height: 160)
        let postureGoalBarPath = UIBezierPath()
        postureGoalBarPath.addArc(withCenter: CGPoint(x: postureGoalBarRect.midX, y: postureGoalBarRect.midY), radius: postureGoalBarRect.width / 2, startAngle: 140 * CGFloat.pi/180, endAngle: -postGoalAngle * CGFloat.pi/180, clockwise: true)

        condColor.setStroke()
        postureGoalBarPath.lineWidth = 6
        postureGoalBarPath.lineCapStyle = .round
        postureGoalBarPath.lineJoinStyle = .round
        postureGoalBarPath.stroke()

        context.endTransparencyLayer()
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// WalkingPerson
        context.saveGState()
        context.translateBy(x: 71.7, y: 63.59)
        context.scaleBy(x: 0.7, y: 0.7)



        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 13.5, y: 0, width: 24, height: 23))
        paoTextWhite.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 1.17, y: 51.37))
        bezierPath.addCurve(to: CGPoint(x: 1.34, y: 51.11), controlPoint1: CGPoint(x: 1.2, y: 51.33), controlPoint2: CGPoint(x: 1.26, y: 51.24))
        bezierPath.addCurve(to: CGPoint(x: 1.8, y: 50.41), controlPoint1: CGPoint(x: 1.48, y: 50.91), controlPoint2: CGPoint(x: 1.63, y: 50.68))
        bezierPath.addCurve(to: CGPoint(x: 3.45, y: 47.93), controlPoint1: CGPoint(x: 2.3, y: 49.66), controlPoint2: CGPoint(x: 2.85, y: 48.83))
        bezierPath.addCurve(to: CGPoint(x: 8.67, y: 40.39), controlPoint1: CGPoint(x: 5.18, y: 45.37), controlPoint2: CGPoint(x: 6.95, y: 42.8))
        bezierPath.addCurve(to: CGPoint(x: 10.03, y: 38.52), controlPoint1: CGPoint(x: 9.13, y: 39.75), controlPoint2: CGPoint(x: 9.58, y: 39.12))
        bezierPath.addCurve(to: CGPoint(x: 18.99, y: 28.33), controlPoint1: CGPoint(x: 13.87, y: 33.27), controlPoint2: CGPoint(x: 16.62, y: 29.98))
        bezierPath.addCurve(to: CGPoint(x: 21.93, y: 26.75), controlPoint1: CGPoint(x: 19.92, y: 27.68), controlPoint2: CGPoint(x: 20.9, y: 27.15))
        bezierPath.addCurve(to: CGPoint(x: 32.93, y: 26.86), controlPoint1: CGPoint(x: 25.73, y: 25.27), controlPoint2: CGPoint(x: 29.48, y: 25.57))
        bezierPath.addCurve(to: CGPoint(x: 35.5, y: 28.07), controlPoint1: CGPoint(x: 34.02, y: 27.26), controlPoint2: CGPoint(x: 34.88, y: 27.7))
        bezierPath.addLine(to: CGPoint(x: 35.79, y: 28.25))
        bezierPath.addLine(to: CGPoint(x: 36.07, y: 28.45))
        bezierPath.addLine(to: CGPoint(x: 55.09, y: 42.6))
        bezierPath.addCurve(to: CGPoint(x: 56.6, y: 52.71), controlPoint1: CGPoint(x: 58.27, y: 44.97), controlPoint2: CGPoint(x: 58.95, y: 49.5))
        bezierPath.addCurve(to: CGPoint(x: 46.57, y: 54.24), controlPoint1: CGPoint(x: 54.25, y: 55.93), controlPoint2: CGPoint(x: 49.76, y: 56.61))
        bezierPath.addLine(to: CGPoint(x: 27.55, y: 40.09))
        bezierPath.addLine(to: CGPoint(x: 31.81, y: 34.27))
        bezierPath.addLine(to: CGPoint(x: 28.12, y: 40.47))
        bezierPath.addCurve(to: CGPoint(x: 28.25, y: 40.55), controlPoint1: CGPoint(x: 28.21, y: 40.53), controlPoint2: CGPoint(x: 28.25, y: 40.55))
        bezierPath.addCurve(to: CGPoint(x: 27.96, y: 40.42), controlPoint1: CGPoint(x: 28.18, y: 40.51), controlPoint2: CGPoint(x: 28.08, y: 40.47))
        bezierPath.addCurve(to: CGPoint(x: 27.24, y: 40.25), controlPoint1: CGPoint(x: 27.7, y: 40.33), controlPoint2: CGPoint(x: 27.44, y: 40.27))
        bezierPath.addCurve(to: CGPoint(x: 27.12, y: 40.23), controlPoint1: CGPoint(x: 27.13, y: 40.24), controlPoint2: CGPoint(x: 27.1, y: 40.24))
        bezierPath.addCurve(to: CGPoint(x: 27.16, y: 40.22), controlPoint1: CGPoint(x: 27.14, y: 40.23), controlPoint2: CGPoint(x: 27.16, y: 40.22))
        bezierPath.addCurve(to: CGPoint(x: 27.18, y: 40.21), controlPoint1: CGPoint(x: 27.22, y: 40.18), controlPoint2: CGPoint(x: 27.22, y: 40.18))
        bezierPath.addCurve(to: CGPoint(x: 26.78, y: 40.6), controlPoint1: CGPoint(x: 27.08, y: 40.3), controlPoint2: CGPoint(x: 26.94, y: 40.43))
        bezierPath.addCurve(to: CGPoint(x: 25.38, y: 42.17), controlPoint1: CGPoint(x: 26.4, y: 40.99), controlPoint2: CGPoint(x: 25.92, y: 41.52))
        bezierPath.addCurve(to: CGPoint(x: 21.56, y: 47.11), controlPoint1: CGPoint(x: 24.31, y: 43.46), controlPoint2: CGPoint(x: 23.02, y: 45.13))
        bezierPath.addCurve(to: CGPoint(x: 20.31, y: 48.85), controlPoint1: CGPoint(x: 21.16, y: 47.67), controlPoint2: CGPoint(x: 20.73, y: 48.25))
        bezierPath.addCurve(to: CGPoint(x: 15.33, y: 56.04), controlPoint1: CGPoint(x: 18.67, y: 51.13), controlPoint2: CGPoint(x: 16.98, y: 53.59))
        bezierPath.addCurve(to: CGPoint(x: 13.75, y: 58.42), controlPoint1: CGPoint(x: 14.75, y: 56.9), controlPoint2: CGPoint(x: 14.22, y: 57.7))
        bezierPath.addCurve(to: CGPoint(x: 13.32, y: 59.08), controlPoint1: CGPoint(x: 13.59, y: 58.67), controlPoint2: CGPoint(x: 13.44, y: 58.89))
        bezierPath.addCurve(to: CGPoint(x: 13.17, y: 59.3), controlPoint1: CGPoint(x: 13.24, y: 59.19), controlPoint2: CGPoint(x: 13.2, y: 59.26))
        bezierPath.addCurve(to: CGPoint(x: 3.24, y: 61.39), controlPoint1: CGPoint(x: 11, y: 62.64), controlPoint2: CGPoint(x: 6.56, y: 63.57))
        bezierPath.addCurve(to: CGPoint(x: 1.17, y: 51.37), controlPoint1: CGPoint(x: -0.07, y: 59.2), controlPoint2: CGPoint(x: -1, y: 54.71))
        bezierPath.close()
        paoTextWhite.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 20.46, y: 74.94))
        bezier2Path.addCurve(to: CGPoint(x: 18.96, y: 35.48), controlPoint1: CGPoint(x: 18.49, y: 51.16), controlPoint2: CGPoint(x: 18.16, y: 39.82))
        bezier2Path.addCurve(to: CGPoint(x: 20.34, y: 31.64), controlPoint1: CGPoint(x: 19.21, y: 34.15), controlPoint2: CGPoint(x: 19.58, y: 32.95))
        bezier2Path.addCurve(to: CGPoint(x: 30.64, y: 26.5), controlPoint1: CGPoint(x: 22.26, y: 28.32), controlPoint2: CGPoint(x: 25.9, y: 25.87))
        bezier2Path.addCurve(to: CGPoint(x: 31.86, y: 26.73), controlPoint1: CGPoint(x: 31.27, y: 26.59), controlPoint2: CGPoint(x: 31.27, y: 26.59))
        bezier2Path.addCurve(to: CGPoint(x: 39.28, y: 39.35), controlPoint1: CGPoint(x: 37.37, y: 28.15), controlPoint2: CGPoint(x: 40.69, y: 33.8))
        bezier2Path.addCurve(to: CGPoint(x: 26.77, y: 46.84), controlPoint1: CGPoint(x: 37.88, y: 44.91), controlPoint2: CGPoint(x: 32.27, y: 48.26))
        bezier2Path.addCurve(to: CGPoint(x: 27.98, y: 47.07), controlPoint1: CGPoint(x: 27.35, y: 46.98), controlPoint2: CGPoint(x: 27.35, y: 46.98))
        bezier2Path.addCurve(to: CGPoint(x: 38.13, y: 42.08), controlPoint1: CGPoint(x: 32.69, y: 47.69), controlPoint2: CGPoint(x: 36.27, y: 45.29))
        bezier2Path.addCurve(to: CGPoint(x: 38.98, y: 40.16), controlPoint1: CGPoint(x: 38.52, y: 41.39), controlPoint2: CGPoint(x: 38.79, y: 40.76))
        bezier2Path.addCurve(to: CGPoint(x: 39.19, y: 39.3), controlPoint1: CGPoint(x: 39.08, y: 39.82), controlPoint2: CGPoint(x: 39.15, y: 39.54))
        bezier2Path.addCurve(to: CGPoint(x: 39.22, y: 39.12), controlPoint1: CGPoint(x: 39.21, y: 39.22), controlPoint2: CGPoint(x: 39.22, y: 39.16))
        bezier2Path.addCurve(to: CGPoint(x: 39.21, y: 39.24), controlPoint1: CGPoint(x: 39.22, y: 39.14), controlPoint2: CGPoint(x: 39.21, y: 39.18))
        bezier2Path.addCurve(to: CGPoint(x: 39.15, y: 40.29), controlPoint1: CGPoint(x: 39.19, y: 39.48), controlPoint2: CGPoint(x: 39.17, y: 39.83))
        bezier2Path.addCurve(to: CGPoint(x: 39.19, y: 45.65), controlPoint1: CGPoint(x: 39.12, y: 41.54), controlPoint2: CGPoint(x: 39.12, y: 43.31))
        bezier2Path.addCurve(to: CGPoint(x: 40.97, y: 73.21), controlPoint1: CGPoint(x: 39.37, y: 51.71), controlPoint2: CGPoint(x: 39.94, y: 60.74))
        bezier2Path.addCurve(to: CGPoint(x: 31.57, y: 84.41), controlPoint1: CGPoint(x: 41.44, y: 78.92), controlPoint2: CGPoint(x: 37.23, y: 83.94))
        bezier2Path.addCurve(to: CGPoint(x: 20.46, y: 74.94), controlPoint1: CGPoint(x: 25.9, y: 84.89), controlPoint2: CGPoint(x: 20.93, y: 80.65))
        bezier2Path.close()
        paoTextWhite.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 35.04, y: 114.33))
        bezier3Path.addCurve(to: CGPoint(x: 28.59, y: 102.32), controlPoint1: CGPoint(x: 32.36, y: 110.82), controlPoint2: CGPoint(x: 30.23, y: 106.78))
        bezier3Path.addCurve(to: CGPoint(x: 24.97, y: 86.87), controlPoint1: CGPoint(x: 26.76, y: 97.35), controlPoint2: CGPoint(x: 25.6, y: 92.11))
        bezier3Path.addCurve(to: CGPoint(x: 24.53, y: 81.66), controlPoint1: CGPoint(x: 24.75, y: 85.01), controlPoint2: CGPoint(x: 24.61, y: 83.26))
        bezier3Path.addCurve(to: CGPoint(x: 24.46, y: 79.25), controlPoint1: CGPoint(x: 24.48, y: 80.62), controlPoint2: CGPoint(x: 24.46, y: 79.81))
        bezier3Path.addCurve(to: CGPoint(x: 24.46, y: 79.2), controlPoint1: CGPoint(x: 24.46, y: 79.22), controlPoint2: CGPoint(x: 24.46, y: 79.22))
        bezier3Path.addCurve(to: CGPoint(x: 31.08, y: 72.66), controlPoint1: CGPoint(x: 24.5, y: 75.55), controlPoint2: CGPoint(x: 27.47, y: 72.63))
        bezier3Path.addCurve(to: CGPoint(x: 37.56, y: 79.34), controlPoint1: CGPoint(x: 34.7, y: 72.7), controlPoint2: CGPoint(x: 37.6, y: 75.69))
        bezier3Path.addCurve(to: CGPoint(x: 37.56, y: 79.33), controlPoint1: CGPoint(x: 37.56, y: 79.32), controlPoint2: CGPoint(x: 37.56, y: 79.32))
        bezier3Path.addCurve(to: CGPoint(x: 37.61, y: 81.01), controlPoint1: CGPoint(x: 37.56, y: 79.65), controlPoint2: CGPoint(x: 37.57, y: 80.22))
        bezier3Path.addCurve(to: CGPoint(x: 37.97, y: 85.28), controlPoint1: CGPoint(x: 37.67, y: 82.31), controlPoint2: CGPoint(x: 37.79, y: 83.74))
        bezier3Path.addCurve(to: CGPoint(x: 40.87, y: 97.72), controlPoint1: CGPoint(x: 38.49, y: 89.56), controlPoint2: CGPoint(x: 39.43, y: 93.82))
        bezier3Path.addCurve(to: CGPoint(x: 45.41, y: 106.26), controlPoint1: CGPoint(x: 42.07, y: 101), controlPoint2: CGPoint(x: 43.59, y: 103.88))
        bezier3Path.addCurve(to: CGPoint(x: 44.23, y: 115.52), controlPoint1: CGPoint(x: 47.62, y: 109.15), controlPoint2: CGPoint(x: 47.09, y: 113.29))
        bezier3Path.addCurve(to: CGPoint(x: 35.04, y: 114.33), controlPoint1: CGPoint(x: 41.37, y: 117.75), controlPoint2: CGPoint(x: 37.25, y: 117.22))
        bezier3Path.close()
        paoTextWhite.setFill()
        bezier3Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 20.29, y: 82.27))
        bezier6Path.addCurve(to: CGPoint(x: 23.47, y: 80.09), controlPoint1: CGPoint(x: 20.74, y: 81.92), controlPoint2: CGPoint(x: 22.97, y: 80.3))
        bezier6Path.addCurve(to: CGPoint(x: 25.74, y: 96.67), controlPoint1: CGPoint(x: 23.05, y: 88.55), controlPoint2: CGPoint(x: 24.79, y: 94.55))
        bezier6Path.addCurve(to: CGPoint(x: 14.25, y: 109.09), controlPoint1: CGPoint(x: 23.26, y: 99.54), controlPoint2: CGPoint(x: 19.23, y: 103.44))
        bezier6Path.addCurve(to: CGPoint(x: 5.01, y: 109.63), controlPoint1: CGPoint(x: 11.85, y: 111.81), controlPoint2: CGPoint(x: 7.71, y: 112.06))
        bezier6Path.addCurve(to: CGPoint(x: 4.46, y: 100.31), controlPoint1: CGPoint(x: 2.3, y: 107.21), controlPoint2: CGPoint(x: 2.06, y: 103.04))
        bezier6Path.addCurve(to: CGPoint(x: 15.16, y: 87.83), controlPoint1: CGPoint(x: 10.94, y: 92.96), controlPoint2: CGPoint(x: 12.88, y: 90.51))
        paoTextWhite.setFill()
        bezier6Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawPaoStandingGoal(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 180), resizing: ResizingBehavior = .aspectFit, postureGoalPercentage: CGFloat = 0.864) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 180), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 180)


        //// Color Declarations
        let paoEggWater = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let paoBarBlue = UIColor(red: 0.024, green: 0.671, blue: 0.925, alpha: 1.000)
        let paoBarGreen = UIColor(red: 0.184, green: 0.886, blue: 0.686, alpha: 1.000)
        let paoTextWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let paoBarGradient = CGGradient(colorsSpace: nil, colors: [paoBarBlue.cgColor, paoBarGreen.cgColor] as CFArray, locations: [0, 1])!

        //// Variable Declarations
        let postGoalAngle: CGFloat = -141 - postureGoalPercentage * 260
        let condColor = UIColor(red: 121.0 / 255.0 * postureGoalPercentage + 231.0 / 255.0 * (1 - postureGoalPercentage), green: 191.0 / 255.0 * postureGoalPercentage + 121.0 / 255.0 * (1 - postureGoalPercentage), blue: 231.0 / 255.0 * postureGoalPercentage + 121.0 / 255.0 * (1 - postureGoalPercentage), alpha: 1)

        //// postureGoalBar 2 Drawing
        context.saveGState()
        context.setAlpha(0.5)

        let postureGoalBar2Rect = CGRect(x: 10, y: 10, width: 160, height: 160)
        let postureGoalBar2Path = UIBezierPath()
        postureGoalBar2Path.addArc(withCenter: CGPoint(x: postureGoalBar2Rect.midX, y: postureGoalBar2Rect.midY), radius: postureGoalBar2Rect.width / 2, startAngle: 140 * CGFloat.pi/180, endAngle: 400 * CGFloat.pi/180, clockwise: true)

        paoEggWater.setStroke()
        postureGoalBar2Path.lineWidth = 2
        postureGoalBar2Path.lineCapStyle = .round
        postureGoalBar2Path.lineJoinStyle = .round
        postureGoalBar2Path.stroke()

        context.restoreGState()


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 180, height: 180))
        context.saveGState()
        rectanglePath.addClip()
        context.drawLinearGradient(paoBarGradient, start: CGPoint(x: 0, y: 90), end: CGPoint(x: 180, y: 90), options: [])
        context.restoreGState()


        //// postureGoalBar Drawing
        context.saveGState()
        context.setBlendMode(.destinationIn)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let postureGoalBarRect = CGRect(x: 10, y: 10, width: 160, height: 160)
        let postureGoalBarPath = UIBezierPath()
        postureGoalBarPath.addArc(withCenter: CGPoint(x: postureGoalBarRect.midX, y: postureGoalBarRect.midY), radius: postureGoalBarRect.width / 2, startAngle: 140 * CGFloat.pi/180, endAngle: -postGoalAngle * CGFloat.pi/180, clockwise: true)

        condColor.setStroke()
        postureGoalBarPath.lineWidth = 6
        postureGoalBarPath.lineCapStyle = .round
        postureGoalBarPath.lineJoinStyle = .round
        postureGoalBarPath.stroke()

        context.endTransparencyLayer()
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// StandingPerson
        context.saveGState()
        context.translateBy(x: 73.6, y: 57)
        context.scaleBy(x: 0.75, y: 0.75)



        //// Head Drawing
        let headPath = UIBezierPath(ovalIn: CGRect(x: 9, y: 0, width: 22, height: 22))
        paoTextWhite.setFill()
        headPath.fill()


        //// Arms Drawing
        let armsPath = UIBezierPath()
        armsPath.move(to: CGPoint(x: 41, y: 66))
        armsPath.addCurve(to: CGPoint(x: 31, y: 28), controlPoint1: CGPoint(x: 41, y: 37), controlPoint2: CGPoint(x: 36, y: 28))
        armsPath.addCurve(to: CGPoint(x: 10, y: 28), controlPoint1: CGPoint(x: 26, y: 28), controlPoint2: CGPoint(x: 16, y: 28))
        armsPath.addCurve(to: CGPoint(x: 0, y: 66), controlPoint1: CGPoint(x: 4, y: 28), controlPoint2: CGPoint(x: 0, y: 36))
        paoTextWhite.setStroke()
        armsPath.lineWidth = 7.5
        armsPath.lineCapStyle = .round
        armsPath.stroke()


        //// LeftLeg Drawing
        let leftLegPath = UIBezierPath()
        leftLegPath.move(to: CGPoint(x: 13, y: 110))
        leftLegPath.addLine(to: CGPoint(x: 13, y: 61))
        paoTextWhite.setStroke()
        leftLegPath.lineWidth = 12
        leftLegPath.lineCapStyle = .round
        leftLegPath.stroke()


        //// RightLeg Drawing
        let rightLegPath = UIBezierPath()
        rightLegPath.move(to: CGPoint(x: 27, y: 110))
        rightLegPath.addLine(to: CGPoint(x: 27, y: 62))
        paoTextWhite.setStroke()
        rightLegPath.lineWidth = 12
        rightLegPath.lineCapStyle = .round
        rightLegPath.stroke()


        //// Chest Drawing
        let chestPath = UIBezierPath(rect: CGRect(x: 7, y: 28, width: 26, height: 37))
        paoTextWhite.setFill()
        chestPath.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawPaoButtonTrain(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 66, height: 90), resizing: ResizingBehavior = .aspectFit, isPressed: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 66, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 66, y: resizedFrame.height / 90)


        //// Color Declarations
        let paoTextWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let paoBtnColorGreen = UIColor(red: 0.204, green: 0.886, blue: 0.729, alpha: 1.000)

        //// Variable Declarations
        let buttonMaskCoord: CGFloat = isPressed ? 0 : 84

        //// buttonBase Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let buttonBasePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 66, height: 90), cornerRadius: 6)
        paoTextWhite.setFill()
        buttonBasePath.fill()

        context.restoreGState()


        //// buttonColorEnable
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip buttonMask
        let buttonMaskPath = UIBezierPath(rect: CGRect(x: 0, y: buttonMaskCoord, width: 66, height: 90))
        var buttonMaskTransformation = CGAffineTransform.identity
        buttonMaskPath.apply(buttonMaskTransformation)
        buttonMaskPath.addClip()


        //// buttonColor Drawing
        let buttonColorPath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 66, height: 90), cornerRadius: 6)
        paoBtnColorGreen.setFill()
        buttonColorPath.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 51.23, y: 26.14))
        bezierPath.addLine(to: CGPoint(x: 48.8, y: 26.14))
        bezierPath.addLine(to: CGPoint(x: 48.8, y: 24.19))
        bezierPath.addCurve(to: CGPoint(x: 46.37, y: 21.76), controlPoint1: CGPoint(x: 48.8, y: 22.83), controlPoint2: CGPoint(x: 47.73, y: 21.76))
        bezierPath.addLine(to: CGPoint(x: 41.51, y: 21.76))
        bezierPath.addCurve(to: CGPoint(x: 39.08, y: 24.19), controlPoint1: CGPoint(x: 40.15, y: 21.76), controlPoint2: CGPoint(x: 39.08, y: 22.83))
        bezierPath.addLine(to: CGPoint(x: 39.08, y: 30.03))
        bezierPath.addLine(to: CGPoint(x: 26.92, y: 30.03))
        bezierPath.addLine(to: CGPoint(x: 26.92, y: 24.19))
        bezierPath.addCurve(to: CGPoint(x: 24.49, y: 21.76), controlPoint1: CGPoint(x: 26.92, y: 22.83), controlPoint2: CGPoint(x: 25.85, y: 21.76))
        bezierPath.addLine(to: CGPoint(x: 19.63, y: 21.76))
        bezierPath.addCurve(to: CGPoint(x: 17.2, y: 24.19), controlPoint1: CGPoint(x: 18.27, y: 21.76), controlPoint2: CGPoint(x: 17.2, y: 22.83))
        bezierPath.addLine(to: CGPoint(x: 17.2, y: 26.14))
        bezierPath.addLine(to: CGPoint(x: 14.77, y: 26.14))
        bezierPath.addCurve(to: CGPoint(x: 12.34, y: 28.57), controlPoint1: CGPoint(x: 13.41, y: 26.14), controlPoint2: CGPoint(x: 12.34, y: 27.21))
        bezierPath.addLine(to: CGPoint(x: 12.34, y: 38.78))
        bezierPath.addCurve(to: CGPoint(x: 14.77, y: 41.21), controlPoint1: CGPoint(x: 12.34, y: 40.14), controlPoint2: CGPoint(x: 13.41, y: 41.21))
        bezierPath.addLine(to: CGPoint(x: 17.2, y: 41.21))
        bezierPath.addLine(to: CGPoint(x: 17.2, y: 43.16))
        bezierPath.addCurve(to: CGPoint(x: 19.63, y: 45.59), controlPoint1: CGPoint(x: 17.2, y: 44.52), controlPoint2: CGPoint(x: 18.27, y: 45.59))
        bezierPath.addLine(to: CGPoint(x: 24.49, y: 45.59))
        bezierPath.addCurve(to: CGPoint(x: 26.92, y: 43.16), controlPoint1: CGPoint(x: 25.85, y: 45.59), controlPoint2: CGPoint(x: 26.92, y: 44.52))
        bezierPath.addLine(to: CGPoint(x: 26.92, y: 37.81))
        bezierPath.addLine(to: CGPoint(x: 39.08, y: 37.81))
        bezierPath.addLine(to: CGPoint(x: 39.08, y: 43.16))
        bezierPath.addCurve(to: CGPoint(x: 41.51, y: 45.59), controlPoint1: CGPoint(x: 39.08, y: 44.52), controlPoint2: CGPoint(x: 40.15, y: 45.59))
        bezierPath.addLine(to: CGPoint(x: 46.37, y: 45.59))
        bezierPath.addCurve(to: CGPoint(x: 48.8, y: 43.16), controlPoint1: CGPoint(x: 47.73, y: 45.59), controlPoint2: CGPoint(x: 48.8, y: 44.52))
        bezierPath.addLine(to: CGPoint(x: 48.8, y: 41.21))
        bezierPath.addLine(to: CGPoint(x: 51.23, y: 41.21))
        bezierPath.addCurve(to: CGPoint(x: 53.66, y: 38.78), controlPoint1: CGPoint(x: 52.59, y: 41.21), controlPoint2: CGPoint(x: 53.66, y: 40.14))
        bezierPath.addLine(to: CGPoint(x: 53.66, y: 28.57))
        bezierPath.addCurve(to: CGPoint(x: 51.23, y: 26.14), controlPoint1: CGPoint(x: 53.66, y: 27.21), controlPoint2: CGPoint(x: 52.59, y: 26.14))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 15.25, y: 38.29))
        bezierPath.addLine(to: CGPoint(x: 15.25, y: 29.06))
        bezierPath.addLine(to: CGPoint(x: 17.2, y: 29.06))
        bezierPath.addLine(to: CGPoint(x: 17.2, y: 38.29))
        bezierPath.addLine(to: CGPoint(x: 15.25, y: 38.29))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 24.01, y: 42.67))
        bezierPath.addLine(to: CGPoint(x: 20.12, y: 42.67))
        bezierPath.addLine(to: CGPoint(x: 20.12, y: 24.68))
        bezierPath.addLine(to: CGPoint(x: 24.01, y: 24.68))
        bezierPath.addLine(to: CGPoint(x: 24.01, y: 30.03))
        bezierPath.addLine(to: CGPoint(x: 24.01, y: 37.81))
        bezierPath.addLine(to: CGPoint(x: 24.01, y: 42.67))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 38.59, y: 34.89))
        bezierPath.addLine(to: CGPoint(x: 26.92, y: 34.89))
        bezierPath.addLine(to: CGPoint(x: 26.92, y: 32.95))
        bezierPath.addLine(to: CGPoint(x: 38.59, y: 32.95))
        bezierPath.addLine(to: CGPoint(x: 38.59, y: 34.89))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 45.88, y: 42.67))
        bezierPath.addLine(to: CGPoint(x: 41.99, y: 42.67))
        bezierPath.addLine(to: CGPoint(x: 41.99, y: 24.68))
        bezierPath.addLine(to: CGPoint(x: 45.88, y: 24.68))
        bezierPath.addLine(to: CGPoint(x: 45.88, y: 42.67))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 50.75, y: 38.29))
        bezierPath.addLine(to: CGPoint(x: 48.8, y: 38.29))
        bezierPath.addLine(to: CGPoint(x: 48.8, y: 29.06))
        bezierPath.addLine(to: CGPoint(x: 50.75, y: 29.06))
        bezierPath.addLine(to: CGPoint(x: 50.75, y: 38.29))
        bezierPath.close()
        paoTextWhite.setFill()
        bezierPath.fill()


        //// Text Drawing
        let textRect = CGRect(x: 8.15, y: 59.86, width: 49.71, height: 21)
        let textTextContent = "TRAIN"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Book", size: 13)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawPaoButtonDebug(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 66, height: 90), resizing: ResizingBehavior = .aspectFit, isPressed: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 66, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 66, y: resizedFrame.height / 90)


        //// Color Declarations
        let paoTextWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let paoBtnColorYellow = UIColor(red: 0.988, green: 0.812, blue: 0.310, alpha: 1.000)

        //// Variable Declarations
        let buttonMaskCoord: CGFloat = isPressed ? 0 : 84

        //// buttonBase Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let buttonBasePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 66, height: 90), cornerRadius: 6)
        paoTextWhite.setFill()
        buttonBasePath.fill()

        context.restoreGState()


        //// buttonColorEnable
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip buttonMask
        let buttonMaskPath = UIBezierPath(rect: CGRect(x: 0, y: buttonMaskCoord, width: 66, height: 90))
        var buttonMaskTransformation = CGAffineTransform.identity
        buttonMaskPath.apply(buttonMaskTransformation)
        buttonMaskPath.addClip()


        //// buttonColor Drawing
        let buttonColorPath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 66, height: 90), cornerRadius: 6)
        paoBtnColorYellow.setFill()
        buttonColorPath.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 8.15, y: 59.86, width: 49.71, height: 21)
        let textTextContent = "DEBUG"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Book", size: 13)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 25.08, y: 21.68, width: 12.16, height: 1.53))
        paoTextWhite.setFill()
        rectanglePath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 19.53, y: 24.88))
        bezier2Path.addLine(to: CGPoint(x: 20.97, y: 23.42))
        bezier2Path.addLine(to: CGPoint(x: 22.42, y: 24.88))
        bezier2Path.addLine(to: CGPoint(x: 23.55, y: 23.73))
        bezier2Path.addLine(to: CGPoint(x: 22.11, y: 22.27))
        bezier2Path.addLine(to: CGPoint(x: 23.55, y: 20.81))
        bezier2Path.addLine(to: CGPoint(x: 22.42, y: 19.66))
        bezier2Path.addLine(to: CGPoint(x: 20.97, y: 21.12))
        bezier2Path.addLine(to: CGPoint(x: 19.53, y: 19.66))
        bezier2Path.addLine(to: CGPoint(x: 18.4, y: 20.81))
        bezier2Path.addLine(to: CGPoint(x: 19.84, y: 22.27))
        bezier2Path.addLine(to: CGPoint(x: 18.39, y: 23.73))
        bezier2Path.addLine(to: CGPoint(x: 19.53, y: 24.88))
        bezier2Path.close()
        paoTextWhite.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 22.82, y: 28.66))
        bezier3Path.addLine(to: CGPoint(x: 20.32, y: 31.2))
        bezier3Path.addLine(to: CGPoint(x: 19.13, y: 30))
        bezier3Path.addLine(to: CGPoint(x: 17.99, y: 31.15))
        bezier3Path.addLine(to: CGPoint(x: 20.32, y: 33.5))
        bezier3Path.addLine(to: CGPoint(x: 23.96, y: 29.81))
        bezier3Path.addLine(to: CGPoint(x: 22.82, y: 28.66))
        bezier3Path.close()
        paoTextWhite.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 19.13, y: 38.96))
        bezier4Path.addLine(to: CGPoint(x: 17.99, y: 40.11))
        bezier4Path.addLine(to: CGPoint(x: 20.32, y: 42.47))
        bezier4Path.addLine(to: CGPoint(x: 23.96, y: 38.78))
        bezier4Path.addLine(to: CGPoint(x: 22.82, y: 37.63))
        bezier4Path.addLine(to: CGPoint(x: 20.32, y: 40.16))
        bezier4Path.addLine(to: CGPoint(x: 19.13, y: 38.96))
        bezier4Path.close()
        paoTextWhite.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 16.03, y: 48.3))
        bezier5Path.addLine(to: CGPoint(x: 16.03, y: 15.73))
        bezier5Path.addLine(to: CGPoint(x: 42.17, y: 15.73))
        bezier5Path.addLine(to: CGPoint(x: 42.17, y: 27.35))
        bezier5Path.addCurve(to: CGPoint(x: 44.24, y: 26.64), controlPoint1: CGPoint(x: 42.77, y: 26.89), controlPoint2: CGPoint(x: 43.48, y: 26.64))
        bezier5Path.addCurve(to: CGPoint(x: 45.19, y: 26.78), controlPoint1: CGPoint(x: 44.56, y: 26.64), controlPoint2: CGPoint(x: 44.88, y: 26.69))
        bezier5Path.addLine(to: CGPoint(x: 45.19, y: 14.71))
        bezier5Path.addCurve(to: CGPoint(x: 43.18, y: 12.67), controlPoint1: CGPoint(x: 45.19, y: 13.59), controlPoint2: CGPoint(x: 44.28, y: 12.67))
        bezier5Path.addLine(to: CGPoint(x: 15.03, y: 12.67))
        bezier5Path.addCurve(to: CGPoint(x: 13.02, y: 14.71), controlPoint1: CGPoint(x: 13.92, y: 12.67), controlPoint2: CGPoint(x: 13.02, y: 13.59))
        bezier5Path.addLine(to: CGPoint(x: 13.02, y: 49.32))
        bezier5Path.addCurve(to: CGPoint(x: 15.03, y: 51.35), controlPoint1: CGPoint(x: 13.02, y: 50.43), controlPoint2: CGPoint(x: 13.92, y: 51.35))
        bezier5Path.addLine(to: CGPoint(x: 27.84, y: 51.35))
        bezier5Path.addCurve(to: CGPoint(x: 28.6, y: 48.3), controlPoint1: CGPoint(x: 27.6, y: 50.29), controlPoint2: CGPoint(x: 27.86, y: 49.15))
        bezier5Path.addLine(to: CGPoint(x: 16.03, y: 48.3))
        bezier5Path.addLine(to: CGPoint(x: 16.03, y: 48.3))
        bezier5Path.close()
        paoTextWhite.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 25.48, y: 41.17))
        bezier6Path.addLine(to: CGPoint(x: 27.54, y: 41.17))
        bezier6Path.addCurve(to: CGPoint(x: 30.15, y: 39.93), controlPoint1: CGPoint(x: 28.17, y: 40.41), controlPoint2: CGPoint(x: 29.1, y: 39.93))
        bezier6Path.addLine(to: CGPoint(x: 30.66, y: 39.93))
        bezier6Path.addCurve(to: CGPoint(x: 30.7, y: 39.82), controlPoint1: CGPoint(x: 30.68, y: 39.89), controlPoint2: CGPoint(x: 30.69, y: 39.86))
        bezier6Path.addLine(to: CGPoint(x: 29.99, y: 39.14))
        bezier6Path.addLine(to: CGPoint(x: 25.48, y: 39.14))
        bezier6Path.addLine(to: CGPoint(x: 25.48, y: 41.17))
        bezier6Path.close()
        paoTextWhite.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 34.98, y: 31.41))
        bezier7Path.addCurve(to: CGPoint(x: 34.74, y: 30.18), controlPoint1: CGPoint(x: 34.82, y: 31.02), controlPoint2: CGPoint(x: 34.75, y: 30.6))
        bezier7Path.addLine(to: CGPoint(x: 25.48, y: 30.18))
        bezier7Path.addLine(to: CGPoint(x: 25.48, y: 32.22))
        bezier7Path.addLine(to: CGPoint(x: 34.5, y: 32.22))
        bezier7Path.addCurve(to: CGPoint(x: 34.98, y: 31.41), controlPoint1: CGPoint(x: 34.65, y: 31.94), controlPoint2: CGPoint(x: 34.8, y: 31.67))
        bezier7Path.close()
        paoTextWhite.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 31.95, y: 35.2))
        bezier8Path.addCurve(to: CGPoint(x: 30.89, y: 35.21), controlPoint1: CGPoint(x: 31.66, y: 34.9), controlPoint2: CGPoint(x: 31.18, y: 34.91))
        bezier8Path.addCurve(to: CGPoint(x: 30.89, y: 36.29), controlPoint1: CGPoint(x: 30.59, y: 35.51), controlPoint2: CGPoint(x: 30.59, y: 35.99))
        bezier8Path.addLine(to: CGPoint(x: 32.69, y: 38.01))
        bezier8Path.addCurve(to: CGPoint(x: 33.22, y: 38.12), controlPoint1: CGPoint(x: 32.83, y: 38.15), controlPoint2: CGPoint(x: 33.02, y: 38.12))
        bezier8Path.addLine(to: CGPoint(x: 34.69, y: 38.12))
        bezier8Path.addCurve(to: CGPoint(x: 32.71, y: 42.63), controlPoint1: CGPoint(x: 33.65, y: 39.44), controlPoint2: CGPoint(x: 32.96, y: 41.04))
        bezier8Path.addLine(to: CGPoint(x: 30.15, y: 42.63))
        bezier8Path.addCurve(to: CGPoint(x: 29.4, y: 43.42), controlPoint1: CGPoint(x: 29.73, y: 42.63), controlPoint2: CGPoint(x: 29.4, y: 43))
        bezier8Path.addCurve(to: CGPoint(x: 30.15, y: 44.22), controlPoint1: CGPoint(x: 29.4, y: 43.85), controlPoint2: CGPoint(x: 29.73, y: 44.22))
        bezier8Path.addLine(to: CGPoint(x: 32.59, y: 44.22))
        bezier8Path.addCurve(to: CGPoint(x: 33.52, y: 47.94), controlPoint1: CGPoint(x: 32.61, y: 45.55), controlPoint2: CGPoint(x: 32.94, y: 46.87))
        bezier8Path.addLine(to: CGPoint(x: 32.97, y: 47.94))
        bezier8Path.addCurve(to: CGPoint(x: 32.44, y: 48.19), controlPoint1: CGPoint(x: 32.77, y: 47.94), controlPoint2: CGPoint(x: 32.58, y: 48.05))
        bezier8Path.addLine(to: CGPoint(x: 30.64, y: 50.04))
        bezier8Path.addCurve(to: CGPoint(x: 30.64, y: 51.13), controlPoint1: CGPoint(x: 30.34, y: 50.34), controlPoint2: CGPoint(x: 30.34, y: 50.83))
        bezier8Path.addCurve(to: CGPoint(x: 31.17, y: 51.36), controlPoint1: CGPoint(x: 30.78, y: 51.28), controlPoint2: CGPoint(x: 30.98, y: 51.36))
        bezier8Path.addCurve(to: CGPoint(x: 31.7, y: 51.13), controlPoint1: CGPoint(x: 31.36, y: 51.36), controlPoint2: CGPoint(x: 31.55, y: 51.28))
        bezier8Path.addLine(to: CGPoint(x: 33.28, y: 49.53))
        bezier8Path.addLine(to: CGPoint(x: 34.5, y: 49.53))
        bezier8Path.addCurve(to: CGPoint(x: 40.66, y: 52.73), controlPoint1: CGPoint(x: 35.98, y: 51.39), controlPoint2: CGPoint(x: 38.31, y: 52.59))
        bezier8Path.addLine(to: CGPoint(x: 40.66, y: 36.79))
        bezier8Path.addLine(to: CGPoint(x: 33.53, y: 36.79))
        bezier8Path.addLine(to: CGPoint(x: 31.95, y: 35.2))
        bezier8Path.close()
        paoTextWhite.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 52.23, y: 42.63))
        bezier9Path.addLine(to: CGPoint(x: 49.62, y: 42.63))
        bezier9Path.addCurve(to: CGPoint(x: 47.48, y: 38.12), controlPoint1: CGPoint(x: 49.3, y: 41.04), controlPoint2: CGPoint(x: 48.46, y: 39.44))
        bezier9Path.addLine(to: CGPoint(x: 49.16, y: 38.12))
        bezier9Path.addCurve(to: CGPoint(x: 49.69, y: 38.01), controlPoint1: CGPoint(x: 49.36, y: 38.12), controlPoint2: CGPoint(x: 49.55, y: 38.15))
        bezier9Path.addLine(to: CGPoint(x: 51.49, y: 36.24))
        bezier9Path.addCurve(to: CGPoint(x: 51.49, y: 35.19), controlPoint1: CGPoint(x: 51.79, y: 35.94), controlPoint2: CGPoint(x: 51.78, y: 35.49))
        bezier9Path.addCurve(to: CGPoint(x: 50.43, y: 35.19), controlPoint1: CGPoint(x: 51.2, y: 34.89), controlPoint2: CGPoint(x: 50.72, y: 34.89))
        bezier9Path.addLine(to: CGPoint(x: 48.84, y: 36.79))
        bezier9Path.addLine(to: CGPoint(x: 41.71, y: 36.79))
        bezier9Path.addLine(to: CGPoint(x: 41.71, y: 52.72))
        bezier9Path.addCurve(to: CGPoint(x: 47.84, y: 49.53), controlPoint1: CGPoint(x: 44.07, y: 52.57), controlPoint2: CGPoint(x: 46.36, y: 51.12))
        bezier9Path.addLine(to: CGPoint(x: 49.09, y: 49.53))
        bezier9Path.addLine(to: CGPoint(x: 50.68, y: 51.13))
        bezier9Path.addCurve(to: CGPoint(x: 51.21, y: 51.36), controlPoint1: CGPoint(x: 50.82, y: 51.28), controlPoint2: CGPoint(x: 51.02, y: 51.36))
        bezier9Path.addCurve(to: CGPoint(x: 51.74, y: 51.14), controlPoint1: CGPoint(x: 51.4, y: 51.36), controlPoint2: CGPoint(x: 51.59, y: 51.29))
        bezier9Path.addCurve(to: CGPoint(x: 51.74, y: 50.06), controlPoint1: CGPoint(x: 52.04, y: 50.84), controlPoint2: CGPoint(x: 52.04, y: 50.36))
        bezier9Path.addLine(to: CGPoint(x: 49.94, y: 48.19))
        bezier9Path.addCurve(to: CGPoint(x: 49.41, y: 47.94), controlPoint1: CGPoint(x: 49.8, y: 48.05), controlPoint2: CGPoint(x: 49.61, y: 47.94))
        bezier9Path.addLine(to: CGPoint(x: 48.83, y: 47.94))
        bezier9Path.addCurve(to: CGPoint(x: 49.76, y: 44.22), controlPoint1: CGPoint(x: 49.42, y: 46.87), controlPoint2: CGPoint(x: 49.75, y: 45.55))
        bezier9Path.addLine(to: CGPoint(x: 52.23, y: 44.22))
        bezier9Path.addCurve(to: CGPoint(x: 52.98, y: 43.42), controlPoint1: CGPoint(x: 52.65, y: 44.22), controlPoint2: CGPoint(x: 52.98, y: 43.85))
        bezier9Path.addCurve(to: CGPoint(x: 52.23, y: 42.63), controlPoint1: CGPoint(x: 52.98, y: 43), controlPoint2: CGPoint(x: 52.65, y: 42.63))
        bezier9Path.close()
        paoTextWhite.setFill()
        bezier9Path.fill()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 36.32, y: 35.73))
        bezier10Path.addLine(to: CGPoint(x: 46.06, y: 35.73))
        bezier10Path.addCurve(to: CGPoint(x: 43.78, y: 31.6), controlPoint1: CGPoint(x: 46.06, y: 33.87), controlPoint2: CGPoint(x: 45.15, y: 32.47))
        bezier10Path.addLine(to: CGPoint(x: 44.77, y: 30.63))
        bezier10Path.addCurve(to: CGPoint(x: 44.77, y: 29.56), controlPoint1: CGPoint(x: 45.06, y: 30.33), controlPoint2: CGPoint(x: 45.06, y: 29.86))
        bezier10Path.addCurve(to: CGPoint(x: 43.7, y: 29.56), controlPoint1: CGPoint(x: 44.47, y: 29.26), controlPoint2: CGPoint(x: 44, y: 29.27))
        bezier10Path.addLine(to: CGPoint(x: 42.28, y: 31.01))
        bezier10Path.addCurve(to: CGPoint(x: 41.19, y: 30.88), controlPoint1: CGPoint(x: 41.93, y: 30.92), controlPoint2: CGPoint(x: 41.57, y: 30.88))
        bezier10Path.addCurve(to: CGPoint(x: 40.1, y: 31.01), controlPoint1: CGPoint(x: 40.81, y: 30.88), controlPoint2: CGPoint(x: 40.45, y: 30.93))
        bezier10Path.addLine(to: CGPoint(x: 38.68, y: 29.57))
        bezier10Path.addCurve(to: CGPoint(x: 37.61, y: 29.57), controlPoint1: CGPoint(x: 38.38, y: 29.27), controlPoint2: CGPoint(x: 37.91, y: 29.27))
        bezier10Path.addCurve(to: CGPoint(x: 37.61, y: 30.65), controlPoint1: CGPoint(x: 37.32, y: 29.87), controlPoint2: CGPoint(x: 37.32, y: 30.35))
        bezier10Path.addLine(to: CGPoint(x: 38.6, y: 31.6))
        bezier10Path.addCurve(to: CGPoint(x: 36.32, y: 35.73), controlPoint1: CGPoint(x: 37.23, y: 32.47), controlPoint2: CGPoint(x: 36.32, y: 33.87))
        bezier10Path.close()
        paoTextWhite.setFill()
        bezier10Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawPaoButtonConfig(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 66, height: 90), resizing: ResizingBehavior = .aspectFit, isPressed: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 66, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 66, y: resizedFrame.height / 90)


        //// Color Declarations
        let paoTextWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let paoBtnColorBlue = UIColor(red: 0.067, green: 0.682, blue: 0.984, alpha: 1.000)

        //// Variable Declarations
        let buttonMaskCoord: CGFloat = isPressed ? 0 : 84

        //// buttonBase Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let buttonBasePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 66, height: 90), cornerRadius: 6)
        paoTextWhite.setFill()
        buttonBasePath.fill()

        context.restoreGState()


        //// buttonColorEnable
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip buttonMask
        let buttonMaskPath = UIBezierPath(rect: CGRect(x: 0, y: buttonMaskCoord, width: 66, height: 90))
        var buttonMaskTransformation = CGAffineTransform.identity
        buttonMaskPath.apply(buttonMaskTransformation)
        buttonMaskPath.addClip()


        //// buttonColor Drawing
        let buttonColorPath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 66, height: 90), cornerRadius: 6)
        paoBtnColorBlue.setFill()
        buttonColorPath.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 6.03, y: 59.86, width: 53.93, height: 21)
        let textTextContent = "CONFIG"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Book", size: 13)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 17.03, y: 23.45))
        bezierPath.addLine(to: CGPoint(x: 20.88, y: 23.45))
        bezierPath.addCurve(to: CGPoint(x: 26.42, y: 26.83), controlPoint1: CGPoint(x: 21.93, y: 25.45), controlPoint2: CGPoint(x: 24.04, y: 26.83))
        bezierPath.addCurve(to: CGPoint(x: 31.95, y: 23.45), controlPoint1: CGPoint(x: 28.8, y: 26.83), controlPoint2: CGPoint(x: 30.9, y: 25.52))
        bezierPath.addLine(to: CGPoint(x: 48.97, y: 23.45))
        bezierPath.addCurve(to: CGPoint(x: 51.7, y: 20.69), controlPoint1: CGPoint(x: 50.51, y: 23.45), controlPoint2: CGPoint(x: 51.7, y: 22.21))
        bezierPath.addCurve(to: CGPoint(x: 48.97, y: 18), controlPoint1: CGPoint(x: 51.7, y: 19.17), controlPoint2: CGPoint(x: 50.44, y: 18))
        bezierPath.addLine(to: CGPoint(x: 31.95, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 26.42, y: 14.62), controlPoint1: CGPoint(x: 30.9, y: 15.93), controlPoint2: CGPoint(x: 28.8, y: 14.62))
        bezierPath.addCurve(to: CGPoint(x: 20.88, y: 18), controlPoint1: CGPoint(x: 24.04, y: 14.62), controlPoint2: CGPoint(x: 21.93, y: 15.93))
        bezierPath.addLine(to: CGPoint(x: 17.03, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 14.3, y: 20.76), controlPoint1: CGPoint(x: 15.49, y: 18), controlPoint2: CGPoint(x: 14.3, y: 19.24))
        bezierPath.addCurve(to: CGPoint(x: 17.03, y: 23.45), controlPoint1: CGPoint(x: 14.3, y: 22.21), controlPoint2: CGPoint(x: 15.56, y: 23.45))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 23.47, y: 19.86))
        bezierPath.addCurve(to: CGPoint(x: 26.42, y: 17.59), controlPoint1: CGPoint(x: 23.83, y: 18.55), controlPoint2: CGPoint(x: 25.09, y: 17.59))
        bezierPath.addCurve(to: CGPoint(x: 29.36, y: 19.86), controlPoint1: CGPoint(x: 27.82, y: 17.59), controlPoint2: CGPoint(x: 29.01, y: 18.48))
        bezierPath.addLine(to: CGPoint(x: 29.57, y: 20.69))
        bezierPath.addLine(to: CGPoint(x: 29.36, y: 21.52))
        bezierPath.addCurve(to: CGPoint(x: 26.42, y: 23.8), controlPoint1: CGPoint(x: 29.01, y: 22.83), controlPoint2: CGPoint(x: 27.75, y: 23.8))
        bezierPath.addCurve(to: CGPoint(x: 23.47, y: 21.52), controlPoint1: CGPoint(x: 25.02, y: 23.8), controlPoint2: CGPoint(x: 23.83, y: 22.9))
        bezierPath.addLine(to: CGPoint(x: 23.26, y: 20.69))
        bezierPath.addLine(to: CGPoint(x: 23.47, y: 19.86))
        bezierPath.close()
        paoTextWhite.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 17.03, y: 35.11))
        bezier2Path.addLine(to: CGPoint(x: 34.05, y: 35.11))
        bezier2Path.addCurve(to: CGPoint(x: 39.58, y: 38.49), controlPoint1: CGPoint(x: 35.1, y: 37.11), controlPoint2: CGPoint(x: 37.2, y: 38.49))
        bezier2Path.addCurve(to: CGPoint(x: 45.12, y: 35.11), controlPoint1: CGPoint(x: 41.96, y: 38.49), controlPoint2: CGPoint(x: 44.07, y: 37.18))
        bezier2Path.addLine(to: CGPoint(x: 48.97, y: 35.11))
        bezier2Path.addCurve(to: CGPoint(x: 51.7, y: 32.35), controlPoint1: CGPoint(x: 50.51, y: 35.11), controlPoint2: CGPoint(x: 51.7, y: 33.87))
        bezier2Path.addCurve(to: CGPoint(x: 48.97, y: 29.66), controlPoint1: CGPoint(x: 51.7, y: 30.83), controlPoint2: CGPoint(x: 50.44, y: 29.66))
        bezier2Path.addLine(to: CGPoint(x: 45.12, y: 29.66))
        bezier2Path.addCurve(to: CGPoint(x: 39.58, y: 26.28), controlPoint1: CGPoint(x: 44.07, y: 27.66), controlPoint2: CGPoint(x: 41.96, y: 26.28))
        bezier2Path.addCurve(to: CGPoint(x: 34.05, y: 29.66), controlPoint1: CGPoint(x: 37.2, y: 26.28), controlPoint2: CGPoint(x: 35.1, y: 27.59))
        bezier2Path.addLine(to: CGPoint(x: 17.03, y: 29.66))
        bezier2Path.addCurve(to: CGPoint(x: 14.3, y: 32.42), controlPoint1: CGPoint(x: 15.49, y: 29.66), controlPoint2: CGPoint(x: 14.3, y: 30.9))
        bezier2Path.addCurve(to: CGPoint(x: 17.03, y: 35.11), controlPoint1: CGPoint(x: 14.3, y: 33.94), controlPoint2: CGPoint(x: 15.56, y: 35.11))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 36.57, y: 31.59))
        bezier2Path.addCurve(to: CGPoint(x: 39.51, y: 29.32), controlPoint1: CGPoint(x: 36.92, y: 30.28), controlPoint2: CGPoint(x: 38.18, y: 29.32))
        bezier2Path.addCurve(to: CGPoint(x: 42.46, y: 31.59), controlPoint1: CGPoint(x: 40.84, y: 29.32), controlPoint2: CGPoint(x: 42.1, y: 30.21))
        bezier2Path.addLine(to: CGPoint(x: 42.67, y: 32.42))
        bezier2Path.addLine(to: CGPoint(x: 42.46, y: 33.25))
        bezier2Path.addCurve(to: CGPoint(x: 39.51, y: 35.52), controlPoint1: CGPoint(x: 42.1, y: 34.56), controlPoint2: CGPoint(x: 40.84, y: 35.52))
        bezier2Path.addCurve(to: CGPoint(x: 36.57, y: 33.25), controlPoint1: CGPoint(x: 38.18, y: 35.52), controlPoint2: CGPoint(x: 36.92, y: 34.63))
        bezier2Path.addLine(to: CGPoint(x: 36.36, y: 32.42))
        bezier2Path.addLine(to: CGPoint(x: 36.57, y: 31.59))
        bezier2Path.close()
        paoTextWhite.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 17.03, y: 46.84))
        bezier3Path.addLine(to: CGPoint(x: 20.88, y: 46.84))
        bezier3Path.addCurve(to: CGPoint(x: 26.42, y: 50.22), controlPoint1: CGPoint(x: 21.93, y: 48.84), controlPoint2: CGPoint(x: 24.04, y: 50.22))
        bezier3Path.addCurve(to: CGPoint(x: 31.95, y: 46.84), controlPoint1: CGPoint(x: 28.8, y: 50.22), controlPoint2: CGPoint(x: 30.9, y: 48.91))
        bezier3Path.addLine(to: CGPoint(x: 48.97, y: 46.84))
        bezier3Path.addCurve(to: CGPoint(x: 51.7, y: 44.08), controlPoint1: CGPoint(x: 50.51, y: 46.84), controlPoint2: CGPoint(x: 51.7, y: 45.6))
        bezier3Path.addCurve(to: CGPoint(x: 48.97, y: 41.39), controlPoint1: CGPoint(x: 51.7, y: 42.56), controlPoint2: CGPoint(x: 50.44, y: 41.39))
        bezier3Path.addLine(to: CGPoint(x: 31.95, y: 41.39))
        bezier3Path.addCurve(to: CGPoint(x: 26.42, y: 38.01), controlPoint1: CGPoint(x: 30.9, y: 39.39), controlPoint2: CGPoint(x: 28.8, y: 38.01))
        bezier3Path.addCurve(to: CGPoint(x: 20.88, y: 41.39), controlPoint1: CGPoint(x: 24.04, y: 38.01), controlPoint2: CGPoint(x: 21.93, y: 39.32))
        bezier3Path.addLine(to: CGPoint(x: 17.03, y: 41.39))
        bezier3Path.addCurve(to: CGPoint(x: 14.3, y: 44.15), controlPoint1: CGPoint(x: 15.49, y: 41.39), controlPoint2: CGPoint(x: 14.3, y: 42.63))
        bezier3Path.addCurve(to: CGPoint(x: 17.03, y: 46.84), controlPoint1: CGPoint(x: 14.3, y: 45.67), controlPoint2: CGPoint(x: 15.56, y: 46.84))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 23.47, y: 43.32))
        bezier3Path.addCurve(to: CGPoint(x: 26.42, y: 41.04), controlPoint1: CGPoint(x: 23.83, y: 42.01), controlPoint2: CGPoint(x: 25.09, y: 41.04))
        bezier3Path.addCurve(to: CGPoint(x: 29.36, y: 43.32), controlPoint1: CGPoint(x: 27.82, y: 41.04), controlPoint2: CGPoint(x: 29.01, y: 41.94))
        bezier3Path.addLine(to: CGPoint(x: 29.57, y: 44.15))
        bezier3Path.addLine(to: CGPoint(x: 29.36, y: 44.98))
        bezier3Path.addCurve(to: CGPoint(x: 26.42, y: 47.25), controlPoint1: CGPoint(x: 29.01, y: 46.29), controlPoint2: CGPoint(x: 27.75, y: 47.25))
        bezier3Path.addCurve(to: CGPoint(x: 23.47, y: 44.98), controlPoint1: CGPoint(x: 25.02, y: 47.25), controlPoint2: CGPoint(x: 23.83, y: 46.36))
        bezier3Path.addLine(to: CGPoint(x: 23.26, y: 44.15))
        bezier3Path.addLine(to: CGPoint(x: 23.47, y: 43.32))
        bezier3Path.close()
        paoTextWhite.setFill()
        bezier3Path.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawPaoButtonHelp(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 66, height: 90), resizing: ResizingBehavior = .aspectFit, isPressed: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 66, height: 90), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 66, y: resizedFrame.height / 90)


        //// Color Declarations
        let paoTextWhite = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let paoBtnColorRed = UIColor(red: 0.800, green: 0.320, blue: 0.429, alpha: 1.000)

        //// Variable Declarations
        let buttonMaskCoord: CGFloat = isPressed ? 0 : 84

        //// buttonBase Drawing
        context.saveGState()
        context.setAlpha(0.2)

        let buttonBasePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 66, height: 90), cornerRadius: 6)
        paoTextWhite.setFill()
        buttonBasePath.fill()

        context.restoreGState()


        //// buttonColorEnable
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip buttonMask
        let buttonMaskPath = UIBezierPath(rect: CGRect(x: 0, y: buttonMaskCoord, width: 66, height: 90))
        var buttonMaskTransformation = CGAffineTransform.identity
        buttonMaskPath.apply(buttonMaskTransformation)
        buttonMaskPath.addClip()


        //// buttonColor Drawing
        let buttonColorPath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 66, height: 90), cornerRadius: 6)
        paoBtnColorRed.setFill()
        buttonColorPath.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 6.03, y: 59.86, width: 53.93, height: 21)
        let textTextContent = "HELP"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Book", size: 13)!, NSForegroundColorAttributeName: paoTextWhite, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Group 2
        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 33.8, y: 14.62))
        bezier4Path.addCurve(to: CGPoint(x: 14.3, y: 34.12), controlPoint1: CGPoint(x: 23.05, y: 14.62), controlPoint2: CGPoint(x: 14.3, y: 23.37))
        bezier4Path.addCurve(to: CGPoint(x: 33.8, y: 53.62), controlPoint1: CGPoint(x: 14.3, y: 44.87), controlPoint2: CGPoint(x: 23.05, y: 53.62))
        bezier4Path.addCurve(to: CGPoint(x: 53.3, y: 34.12), controlPoint1: CGPoint(x: 44.55, y: 53.62), controlPoint2: CGPoint(x: 53.3, y: 44.87))
        bezier4Path.addCurve(to: CGPoint(x: 33.8, y: 14.62), controlPoint1: CGPoint(x: 53.3, y: 23.37), controlPoint2: CGPoint(x: 44.55, y: 14.62))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 33.8, y: 17.22))
        bezier4Path.addCurve(to: CGPoint(x: 50.7, y: 34.12), controlPoint1: CGPoint(x: 43.15, y: 17.22), controlPoint2: CGPoint(x: 50.7, y: 24.77))
        bezier4Path.addCurve(to: CGPoint(x: 33.8, y: 51.02), controlPoint1: CGPoint(x: 50.7, y: 43.47), controlPoint2: CGPoint(x: 43.15, y: 51.02))
        bezier4Path.addCurve(to: CGPoint(x: 16.9, y: 34.12), controlPoint1: CGPoint(x: 24.45, y: 51.02), controlPoint2: CGPoint(x: 16.9, y: 43.47))
        bezier4Path.addCurve(to: CGPoint(x: 33.8, y: 17.22), controlPoint1: CGPoint(x: 16.9, y: 24.77), controlPoint2: CGPoint(x: 24.45, y: 17.22))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 36.83, y: 20.69))
        bezier4Path.addCurve(to: CGPoint(x: 34.67, y: 22.85), controlPoint1: CGPoint(x: 35.64, y: 20.69), controlPoint2: CGPoint(x: 34.67, y: 21.66))
        bezier4Path.addCurve(to: CGPoint(x: 36.83, y: 25.02), controlPoint1: CGPoint(x: 34.67, y: 24.05), controlPoint2: CGPoint(x: 35.64, y: 25.02))
        bezier4Path.addCurve(to: CGPoint(x: 39, y: 22.85), controlPoint1: CGPoint(x: 38.03, y: 25.02), controlPoint2: CGPoint(x: 39, y: 24.05))
        bezier4Path.addCurve(to: CGPoint(x: 36.83, y: 20.69), controlPoint1: CGPoint(x: 39, y: 21.66), controlPoint2: CGPoint(x: 38.03, y: 20.69))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 34.19, y: 25.45))
        bezier4Path.addCurve(to: CGPoint(x: 29.57, y: 27.36), controlPoint1: CGPoint(x: 32.63, y: 25.52), controlPoint2: CGPoint(x: 30.97, y: 26.29))
        bezier4Path.addLine(to: CGPoint(x: 29.43, y: 28.99))
        bezier4Path.addCurve(to: CGPoint(x: 32.5, y: 29.71), controlPoint1: CGPoint(x: 30.74, y: 28.47), controlPoint2: CGPoint(x: 32.1, y: 28.48))
        bezier4Path.addCurve(to: CGPoint(x: 29.2, y: 40.66), controlPoint1: CGPoint(x: 33.49, y: 32.69), controlPoint2: CGPoint(x: 30.12, y: 37.92))
        bezier4Path.addCurve(to: CGPoint(x: 36.98, y: 45.89), controlPoint1: CGPoint(x: 26.69, y: 48.09), controlPoint2: CGPoint(x: 32.7, y: 48.95))
        bezier4Path.addLine(to: CGPoint(x: 37.14, y: 44.13))
        bezier4Path.addCurve(to: CGPoint(x: 34.49, y: 40.08), controlPoint1: CGPoint(x: 34.81, y: 44.86), controlPoint2: CGPoint(x: 33.14, y: 43.96))
        bezier4Path.addCurve(to: CGPoint(x: 36.82, y: 26.17), controlPoint1: CGPoint(x: 35.14, y: 38.21), controlPoint2: CGPoint(x: 40.57, y: 28.77))
        bezier4Path.addCurve(to: CGPoint(x: 34.19, y: 25.45), controlPoint1: CGPoint(x: 36.03, y: 25.63), controlPoint2: CGPoint(x: 35.13, y: 25.41))
        bezier4Path.close()
        paoTextWhite.setFill()
        bezier4Path.fill()
        
        context.restoreGState()

    }




    @objc(PaoDrawingAssetsResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
