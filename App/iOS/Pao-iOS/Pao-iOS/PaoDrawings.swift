//
//  PaoDrawings.swift
//  Pao
//
//  Created by Sergio Soto on 10/5/17.
//  Copyright Â© 2017 Pao. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class PaoDrawings : NSObject {

    //// Drawing Methods

    @objc public dynamic class func drawPaoEggCanvas(frame: CGRect = CGRect(x: 0, y: 0, width: 250, height: 250), time: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let paoDrop = UIColor(red: 0.475, green: 0.749, blue: 0.906, alpha: 1.000)
        var paoDropHueComponent: CGFloat = 1
        var paoDropSaturationComponent: CGFloat = 1
        var paoDropBrightnessComponent: CGFloat = 1
        paoDrop.getHue(&paoDropHueComponent, saturation: &paoDropSaturationComponent, brightness: &paoDropBrightnessComponent, alpha: nil)

        let paoButtonCenter = UIColor(hue: paoDropHueComponent, saturation: 0.182, brightness: paoDropBrightnessComponent, alpha: paoDrop.cgColor.alpha)
        let paoButtonContour = UIColor(red: 0.282, green: 0.686, blue: 0.918, alpha: 1.000)
        let highlight = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [paoDrop.cgColor, paoButtonCenter.cgColor] as CFArray, locations: [0, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.33)
        shadow.shadowOffset = CGSize(width: 1, height: 1)
        shadow.shadowBlurRadius = 2
        let watershadow = NSShadow()
        watershadow.shadowColor = paoDrop.withAlphaComponent(0.33 * paoDrop.cgColor.alpha)
        watershadow.shadowOffset = CGSize(width: 0, height: 1)
        watershadow.shadowBlurRadius = 3

        //// Variable Declarations
        let timeinverse: CGFloat = 1 - time
        let sinoftime: CGFloat = sin(360 * time * CGFloat.pi/180) * 8

        //// Water Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.77992 * frame.height)
        context.scaleBy(x: time, y: time)

        context.saveGState()
        context.setAlpha(timeinverse)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        let waterPath = UIBezierPath()
        waterPath.move(to: CGPoint(x: -0, y: -34.86))
        waterPath.addCurve(to: CGPoint(x: -77.55, y: -0), controlPoint1: CGPoint(x: -42.83, y: -34.86), controlPoint2: CGPoint(x: -77.55, y: -19.25))
        waterPath.addCurve(to: CGPoint(x: -0, y: 34.86), controlPoint1: CGPoint(x: -77.55, y: 19.25), controlPoint2: CGPoint(x: -42.83, y: 34.86))
        waterPath.addCurve(to: CGPoint(x: 77.55, y: -0), controlPoint1: CGPoint(x: 42.83, y: 34.86), controlPoint2: CGPoint(x: 77.55, y: 19.25))
        waterPath.addCurve(to: CGPoint(x: 65.62, y: -18.59), controlPoint1: CGPoint(x: 77.55, y: -6.83), controlPoint2: CGPoint(x: 73.18, y: -13.21))
        waterPath.addCurve(to: CGPoint(x: -0, y: -34.86), controlPoint1: CGPoint(x: 51.88, y: -28.36), controlPoint2: CGPoint(x: 27.63, y: -34.86))
        waterPath.close()
        waterPath.move(to: CGPoint(x: 65.85, y: -23.31))
        waterPath.addCurve(to: CGPoint(x: 81, y: -0), controlPoint1: CGPoint(x: 75.39, y: -16.75), controlPoint2: CGPoint(x: 81, y: -8.7))
        waterPath.addCurve(to: CGPoint(x: -0, y: 40.02), controlPoint1: CGPoint(x: 81, y: 22.1), controlPoint2: CGPoint(x: 44.74, y: 40.02))
        waterPath.addCurve(to: CGPoint(x: -81, y: -0), controlPoint1: CGPoint(x: -44.74, y: 40.02), controlPoint2: CGPoint(x: -81, y: 22.1))
        waterPath.addCurve(to: CGPoint(x: 0, y: -40.02), controlPoint1: CGPoint(x: -81, y: -22.1), controlPoint2: CGPoint(x: -44.74, y: -40.02))
        waterPath.addCurve(to: CGPoint(x: 65.85, y: -23.31), controlPoint1: CGPoint(x: 27.13, y: -40.02), controlPoint2: CGPoint(x: 51.15, y: -33.43))
        waterPath.close()
        context.saveGState()
        context.setShadow(offset: watershadow.shadowOffset, blur: watershadow.shadowBlurRadius, color: (watershadow.shadowColor as! UIColor).cgColor)
        paoDrop.setFill()
        waterPath.fill()
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()

        context.restoreGState()


        //// PaoEgg
        context.saveGState()
        context.translateBy(x: frame.maxX - 125, y: frame.maxY - 55.02)
        context.rotate(by: -sinoftime * CGFloat.pi/180)



        //// Oval Drawing
        let ovalPath = UIBezierPath()
        ovalPath.move(to: CGPoint(x: 71.67, y: -76.63))
        ovalPath.addCurve(to: CGPoint(x: -0, y: 5.02), controlPoint1: CGPoint(x: 71.67, y: -31.53), controlPoint2: CGPoint(x: 39.58, y: 5.02))
        ovalPath.addCurve(to: CGPoint(x: -71.67, y: -76.63), controlPoint1: CGPoint(x: -39.58, y: 5.02), controlPoint2: CGPoint(x: -71.67, y: -31.53))
        ovalPath.addCurve(to: CGPoint(x: 0, y: -173.31), controlPoint1: CGPoint(x: -71.67, y: -121.72), controlPoint2: CGPoint(x: -36.92, y: -173.31))
        ovalPath.addCurve(to: CGPoint(x: 71.67, y: -76.63), controlPoint1: CGPoint(x: 36.92, y: -173.31), controlPoint2: CGPoint(x: 71.67, y: -121.72))
        ovalPath.close()
        context.saveGState()
        ovalPath.addClip()
        context.drawRadialGradient(gradient,
            startCenter: CGPoint(x: 24.31, y: -29.74), startRadius: 51.59,
            endCenter: CGPoint(x: -4.34, y: -73.25), endRadius: 108.21,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        paoButtonContour.setStroke()
        ovalPath.lineWidth = 0.2
        ovalPath.lineCapStyle = .round
        ovalPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: -52, y: -119.98, width: 104, height: 105))
        paoButtonContour.setFill()
        oval2Path.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: -48, y: -116.98, width: 96, height: 99))
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        paoButtonCenter.setFill()
        oval3Path.fill()
        context.restoreGState()



        //// Bezier 2 Drawing
        context.saveGState()
        context.setAlpha(0.4)

        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 25.13, y: -165.59))
        bezier2Path.addCurve(to: CGPoint(x: 71.67, y: -76.63), controlPoint1: CGPoint(x: 51.27, y: -149.53), controlPoint2: CGPoint(x: 71.67, y: -111.17))
        bezier2Path.addCurve(to: CGPoint(x: 11.86, y: 3.91), controlPoint1: CGPoint(x: 71.67, y: -36.14), controlPoint2: CGPoint(x: 45.8, y: -2.53))
        bezier2Path.addCurve(to: CGPoint(x: 43.43, y: -20.76), controlPoint1: CGPoint(x: 21.72, y: -1.42), controlPoint2: CGPoint(x: 33.75, y: -9.27))
        bezier2Path.addCurve(to: CGPoint(x: 54.29, y: -115.3), controlPoint1: CGPoint(x: 65.15, y: -46.55), controlPoint2: CGPoint(x: 62.98, y: -87.37))
        bezier2Path.addCurve(to: CGPoint(x: 25.13, y: -165.59), controlPoint1: CGPoint(x: 47.46, y: -137.28), controlPoint2: CGPoint(x: 39.09, y: -149.68))
        bezier2Path.close()
        highlight.setFill()
        bezier2Path.fill()

        context.restoreGState()



        context.restoreGState()
    }

    @objc public dynamic class func drawPostureBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 300, height: 40), resizing: ResizingBehavior = .aspectFit, currentPosture: CGFloat = 1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 300, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 300, y: resizedFrame.height / 40)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 300, resizedFrame.height / 40)


        //// Color Declarations
        let paoDrop = UIColor(red: 0.475, green: 0.749, blue: 0.906, alpha: 1.000)
        var paoDropHueComponent: CGFloat = 1
        var paoDropSaturationComponent: CGFloat = 1
        var paoDropBrightnessComponent: CGFloat = 1
        paoDrop.getHue(&paoDropHueComponent, saturation: &paoDropSaturationComponent, brightness: &paoDropBrightnessComponent, alpha: nil)

        let paoButtonCenter = UIColor(hue: paoDropHueComponent, saturation: 0.182, brightness: paoDropBrightnessComponent, alpha: paoDrop.cgColor.alpha)
        let paoButtonContour = UIColor(red: 0.282, green: 0.686, blue: 0.918, alpha: 1.000)
        let gradient2Color = UIColor(red: 0.906, green: 0.475, blue: 0.475, alpha: 1.000)

        //// Gradient Declarations
        let gradient2 = CGGradient(colorsSpace: nil, colors: [gradient2Color.cgColor, paoDrop.cgColor] as CFArray, locations: [0, 1])!

        //// Shadow Declarations
        let shadow2 = NSShadow()
        shadow2.shadowColor = UIColor.black.withAlphaComponent(0.18)
        shadow2.shadowOffset = CGSize(width: 0, height: 0)
        shadow2.shadowBlurRadius = 6

        //// Variable Declarations
        let postureInPixels: CGFloat = currentPosture * 294

        //// posture background Drawing
        let postureBackgroundPath = UIBezierPath(roundedRect: CGRect(x: 3, y: 3, width: 294, height: 34), cornerRadius: 17)
        paoButtonCenter.setFill()
        postureBackgroundPath.fill()

        ////// posture background Inner Shadow
        context.saveGState()
        context.clip(to: postureBackgroundPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow2.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let postureBackgroundOpaqueShadow = (shadow2.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: postureBackgroundOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        postureBackgroundOpaqueShadow.setFill()
        postureBackgroundPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// border Drawing
        let borderPath = UIBezierPath(roundedRect: CGRect(x: 2, y: 2, width: 296, height: 36), cornerRadius: 18)
        paoButtonContour.setStroke()
        borderPath.lineWidth = 2
        borderPath.lineCapStyle = .round
        borderPath.lineJoinStyle = .round
        borderPath.stroke()


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip clipper
        let clipperPath = UIBezierPath(roundedRect: CGRect(x: 3, y: 3, width: postureInPixels, height: 34), cornerRadius: 17)
        clipperPath.addClip()


        //// posture color Drawing
        let postureColorPath = UIBezierPath(roundedRect: CGRect(x: 3, y: 3, width: 294, height: 34), cornerRadius: 17)
        context.saveGState()
        postureColorPath.addClip()
        context.drawLinearGradient(gradient2,
            start: CGPoint(x: 78.4, y: 22.74),
            end: CGPoint(x: 221.79, y: 22.14),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        ////// posture color Inner Shadow
        context.saveGState()
        context.clip(to: postureColorPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow2.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let postureColorOpaqueShadow = (shadow2.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: postureColorOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        postureColorOpaqueShadow.setFill()
        postureColorPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc public dynamic class func drawStandingGoal(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 180), resizing: ResizingBehavior = .aspectFit, postureGoalPercentage: CGFloat = 0.066) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 180), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 180)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 180, resizedFrame.height / 180)


        //// Color Declarations
        let paoDrop = UIColor(red: 0.475, green: 0.749, blue: 0.906, alpha: 1.000)
        var paoDropHueComponent: CGFloat = 1
        var paoDropSaturationComponent: CGFloat = 1
        var paoDropBrightnessComponent: CGFloat = 1
        paoDrop.getHue(&paoDropHueComponent, saturation: &paoDropSaturationComponent, brightness: &paoDropBrightnessComponent, alpha: nil)

        let paoButtonCenter = UIColor(hue: paoDropHueComponent, saturation: 0.182, brightness: paoDropBrightnessComponent, alpha: paoDrop.cgColor.alpha)

        //// Shadow Declarations
        let shadow2 = NSShadow()
        shadow2.shadowColor = UIColor.black.withAlphaComponent(0.18)
        shadow2.shadowOffset = CGSize(width: 0, height: 0)
        shadow2.shadowBlurRadius = 6

        //// Variable Declarations
        let postGoalAngle: CGFloat = 449 - postureGoalPercentage * 360
        let condColor = UIColor(red: 121.0 / 255.0 * postureGoalPercentage + 231.0 / 255.0 * (1 - postureGoalPercentage), green: 191.0 / 255.0 * postureGoalPercentage + 121.0 / 255.0 * (1 - postureGoalPercentage), blue: 231.0 / 255.0 * postureGoalPercentage + 121.0 / 255.0 * (1 - postureGoalPercentage), alpha: 1)

        //// background Drawing
        let backgroundPath = UIBezierPath()
        backgroundPath.move(to: CGPoint(x: 177.5, y: 90))
        backgroundPath.addCurve(to: CGPoint(x: 90, y: 177.5), controlPoint1: CGPoint(x: 177.5, y: 138.32), controlPoint2: CGPoint(x: 138.32, y: 177.5))
        backgroundPath.addCurve(to: CGPoint(x: 2.5, y: 90), controlPoint1: CGPoint(x: 41.68, y: 177.5), controlPoint2: CGPoint(x: 2.5, y: 138.32))
        backgroundPath.addCurve(to: CGPoint(x: 90, y: 2.5), controlPoint1: CGPoint(x: 2.5, y: 41.68), controlPoint2: CGPoint(x: 41.68, y: 2.5))
        backgroundPath.addCurve(to: CGPoint(x: 177.5, y: 90), controlPoint1: CGPoint(x: 138.32, y: 2.5), controlPoint2: CGPoint(x: 177.5, y: 41.68))
        backgroundPath.addLine(to: CGPoint(x: 162.5, y: 90))
        backgroundPath.addCurve(to: CGPoint(x: 90, y: 17.5), controlPoint1: CGPoint(x: 162.5, y: 49.96), controlPoint2: CGPoint(x: 130.04, y: 17.5))
        backgroundPath.addCurve(to: CGPoint(x: 17.5, y: 90), controlPoint1: CGPoint(x: 49.96, y: 17.5), controlPoint2: CGPoint(x: 17.5, y: 49.96))
        backgroundPath.addCurve(to: CGPoint(x: 90, y: 162.5), controlPoint1: CGPoint(x: 17.5, y: 130.04), controlPoint2: CGPoint(x: 49.96, y: 162.5))
        backgroundPath.addCurve(to: CGPoint(x: 162.5, y: 90), controlPoint1: CGPoint(x: 130.04, y: 162.5), controlPoint2: CGPoint(x: 162.5, y: 130.04))
        backgroundPath.addLine(to: CGPoint(x: 177.5, y: 90))
        backgroundPath.close()
        paoButtonCenter.setFill()
        backgroundPath.fill()

        ////// background Inner Shadow
        context.saveGState()
        context.clip(to: backgroundPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow2.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let backgroundOpaqueShadow = (shadow2.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: backgroundOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        backgroundOpaqueShadow.setFill()
        backgroundPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// postureGoalBar Drawing
        let postureGoalBarRect = CGRect(x: 10, y: 10, width: 160, height: 160)
        let postureGoalBarPath = UIBezierPath()
        postureGoalBarPath.addArc(withCenter: CGPoint(x: postureGoalBarRect.midX, y: postureGoalBarRect.midY), radius: postureGoalBarRect.width / 2, startAngle: -450 * CGFloat.pi/180, endAngle: -postGoalAngle * CGFloat.pi/180, clockwise: true)

        condColor.setStroke()
        postureGoalBarPath.lineWidth = 15
        postureGoalBarPath.lineCapStyle = .round
        postureGoalBarPath.lineJoinStyle = .round
        postureGoalBarPath.stroke()


        //// StandingPerson
        //// Head Drawing
        let headPath = UIBezierPath(ovalIn: CGRect(x: 79, y: 32, width: 22, height: 22))
        condColor.setFill()
        headPath.fill()


        //// Arms Drawing
        let armsPath = UIBezierPath()
        armsPath.move(to: CGPoint(x: 111, y: 98))
        armsPath.addCurve(to: CGPoint(x: 101, y: 60), controlPoint1: CGPoint(x: 111, y: 69), controlPoint2: CGPoint(x: 106, y: 60))
        armsPath.addCurve(to: CGPoint(x: 80, y: 60), controlPoint1: CGPoint(x: 96, y: 60), controlPoint2: CGPoint(x: 86, y: 60))
        armsPath.addCurve(to: CGPoint(x: 70, y: 98), controlPoint1: CGPoint(x: 74, y: 60), controlPoint2: CGPoint(x: 70, y: 68))
        condColor.setStroke()
        armsPath.lineWidth = 7.5
        armsPath.lineCapStyle = .round
        armsPath.stroke()


        //// LeftLeg Drawing
        let leftLegPath = UIBezierPath()
        leftLegPath.move(to: CGPoint(x: 83, y: 142))
        leftLegPath.addLine(to: CGPoint(x: 83, y: 93))
        condColor.setStroke()
        leftLegPath.lineWidth = 12
        leftLegPath.lineCapStyle = .round
        leftLegPath.stroke()


        //// RightLeg Drawing
        let rightLegPath = UIBezierPath()
        rightLegPath.move(to: CGPoint(x: 97, y: 142))
        rightLegPath.addLine(to: CGPoint(x: 97, y: 94))
        condColor.setStroke()
        rightLegPath.lineWidth = 12
        rightLegPath.lineCapStyle = .round
        rightLegPath.stroke()


        //// Chest Drawing
        let chestPath = UIBezierPath(rect: CGRect(x: 77, y: 60, width: 26, height: 37))
        condColor.setFill()
        chestPath.fill()
        
        context.restoreGState()

    }

    @objc public dynamic class func drawWalkingGoal(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 180), resizing: ResizingBehavior = .aspectFit, postureGoalPercentage: CGFloat = 0.066) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 180), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 180)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 180, resizedFrame.height / 180)


        //// Color Declarations
        let paoDrop = UIColor(red: 0.475, green: 0.749, blue: 0.906, alpha: 1.000)
        var paoDropHueComponent: CGFloat = 1
        var paoDropSaturationComponent: CGFloat = 1
        var paoDropBrightnessComponent: CGFloat = 1
        paoDrop.getHue(&paoDropHueComponent, saturation: &paoDropSaturationComponent, brightness: &paoDropBrightnessComponent, alpha: nil)

        let paoButtonCenter = UIColor(hue: paoDropHueComponent, saturation: 0.182, brightness: paoDropBrightnessComponent, alpha: paoDrop.cgColor.alpha)

        //// Shadow Declarations
        let shadow2 = NSShadow()
        shadow2.shadowColor = UIColor.black.withAlphaComponent(0.18)
        shadow2.shadowOffset = CGSize(width: 0, height: 0)
        shadow2.shadowBlurRadius = 6

        //// Variable Declarations
        let postGoalAngle: CGFloat = 449 - postureGoalPercentage * 360
        let condColor = UIColor(red: 121.0 / 255.0 * postureGoalPercentage + 231.0 / 255.0 * (1 - postureGoalPercentage), green: 191.0 / 255.0 * postureGoalPercentage + 121.0 / 255.0 * (1 - postureGoalPercentage), blue: 231.0 / 255.0 * postureGoalPercentage + 121.0 / 255.0 * (1 - postureGoalPercentage), alpha: 1)

        //// background Drawing
        let backgroundPath = UIBezierPath()
        backgroundPath.move(to: CGPoint(x: 177.5, y: 90))
        backgroundPath.addCurve(to: CGPoint(x: 90, y: 177.5), controlPoint1: CGPoint(x: 177.5, y: 138.32), controlPoint2: CGPoint(x: 138.32, y: 177.5))
        backgroundPath.addCurve(to: CGPoint(x: 2.5, y: 90), controlPoint1: CGPoint(x: 41.68, y: 177.5), controlPoint2: CGPoint(x: 2.5, y: 138.32))
        backgroundPath.addCurve(to: CGPoint(x: 90, y: 2.5), controlPoint1: CGPoint(x: 2.5, y: 41.68), controlPoint2: CGPoint(x: 41.68, y: 2.5))
        backgroundPath.addCurve(to: CGPoint(x: 177.5, y: 90), controlPoint1: CGPoint(x: 138.32, y: 2.5), controlPoint2: CGPoint(x: 177.5, y: 41.68))
        backgroundPath.addLine(to: CGPoint(x: 162.5, y: 90))
        backgroundPath.addCurve(to: CGPoint(x: 90, y: 17.5), controlPoint1: CGPoint(x: 162.5, y: 49.96), controlPoint2: CGPoint(x: 130.04, y: 17.5))
        backgroundPath.addCurve(to: CGPoint(x: 17.5, y: 90), controlPoint1: CGPoint(x: 49.96, y: 17.5), controlPoint2: CGPoint(x: 17.5, y: 49.96))
        backgroundPath.addCurve(to: CGPoint(x: 90, y: 162.5), controlPoint1: CGPoint(x: 17.5, y: 130.04), controlPoint2: CGPoint(x: 49.96, y: 162.5))
        backgroundPath.addCurve(to: CGPoint(x: 162.5, y: 90), controlPoint1: CGPoint(x: 130.04, y: 162.5), controlPoint2: CGPoint(x: 162.5, y: 130.04))
        backgroundPath.addLine(to: CGPoint(x: 177.5, y: 90))
        backgroundPath.close()
        paoButtonCenter.setFill()
        backgroundPath.fill()

        ////// background Inner Shadow
        context.saveGState()
        context.clip(to: backgroundPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow2.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let backgroundOpaqueShadow = (shadow2.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: backgroundOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        backgroundOpaqueShadow.setFill()
        backgroundPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// postureGoalBar Drawing
        let postureGoalBarRect = CGRect(x: 10, y: 10, width: 160, height: 160)
        let postureGoalBarPath = UIBezierPath()
        postureGoalBarPath.addArc(withCenter: CGPoint(x: postureGoalBarRect.midX, y: postureGoalBarRect.midY), radius: postureGoalBarRect.width / 2, startAngle: -450 * CGFloat.pi/180, endAngle: -postGoalAngle * CGFloat.pi/180, clockwise: true)

        condColor.setStroke()
        postureGoalBarPath.lineWidth = 15
        postureGoalBarPath.lineCapStyle = .round
        postureGoalBarPath.lineJoinStyle = .round
        postureGoalBarPath.stroke()


        //// WalkingPerson
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 78.5, y: 31.8, width: 24, height: 23))
        condColor.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 66.17, y: 83.18))
        bezierPath.addCurve(to: CGPoint(x: 66.34, y: 82.92), controlPoint1: CGPoint(x: 66.2, y: 83.13), controlPoint2: CGPoint(x: 66.26, y: 83.04))
        bezierPath.addCurve(to: CGPoint(x: 66.8, y: 82.22), controlPoint1: CGPoint(x: 66.47, y: 82.71), controlPoint2: CGPoint(x: 66.63, y: 82.48))
        bezierPath.addCurve(to: CGPoint(x: 68.45, y: 79.74), controlPoint1: CGPoint(x: 67.3, y: 81.47), controlPoint2: CGPoint(x: 67.85, y: 80.63))
        bezierPath.addCurve(to: CGPoint(x: 73.67, y: 72.19), controlPoint1: CGPoint(x: 70.18, y: 77.17), controlPoint2: CGPoint(x: 71.95, y: 74.6))
        bezierPath.addCurve(to: CGPoint(x: 75.02, y: 70.32), controlPoint1: CGPoint(x: 74.13, y: 71.55), controlPoint2: CGPoint(x: 74.58, y: 70.93))
        bezierPath.addCurve(to: CGPoint(x: 83.99, y: 60.13), controlPoint1: CGPoint(x: 78.87, y: 65.07), controlPoint2: CGPoint(x: 81.62, y: 61.78))
        bezierPath.addCurve(to: CGPoint(x: 86.93, y: 58.56), controlPoint1: CGPoint(x: 84.92, y: 59.48), controlPoint2: CGPoint(x: 85.9, y: 58.96))
        bezierPath.addCurve(to: CGPoint(x: 97.93, y: 58.66), controlPoint1: CGPoint(x: 90.73, y: 57.07), controlPoint2: CGPoint(x: 94.48, y: 57.37))
        bezierPath.addCurve(to: CGPoint(x: 100.5, y: 59.87), controlPoint1: CGPoint(x: 99.02, y: 59.07), controlPoint2: CGPoint(x: 99.88, y: 59.5))
        bezierPath.addLine(to: CGPoint(x: 100.79, y: 60.05))
        bezierPath.addLine(to: CGPoint(x: 101.06, y: 60.26))
        bezierPath.addLine(to: CGPoint(x: 120.09, y: 74.4))
        bezierPath.addCurve(to: CGPoint(x: 121.6, y: 84.52), controlPoint1: CGPoint(x: 123.27, y: 76.77), controlPoint2: CGPoint(x: 123.95, y: 81.3))
        bezierPath.addCurve(to: CGPoint(x: 111.57, y: 86.04), controlPoint1: CGPoint(x: 119.25, y: 87.73), controlPoint2: CGPoint(x: 114.76, y: 88.41))
        bezierPath.addLine(to: CGPoint(x: 92.55, y: 71.89))
        bezierPath.addLine(to: CGPoint(x: 96.81, y: 66.07))
        bezierPath.addLine(to: CGPoint(x: 93.12, y: 72.28))
        bezierPath.addCurve(to: CGPoint(x: 93.25, y: 72.35), controlPoint1: CGPoint(x: 93.21, y: 72.33), controlPoint2: CGPoint(x: 93.25, y: 72.35))
        bezierPath.addCurve(to: CGPoint(x: 92.96, y: 72.23), controlPoint1: CGPoint(x: 93.18, y: 72.32), controlPoint2: CGPoint(x: 93.07, y: 72.27))
        bezierPath.addCurve(to: CGPoint(x: 92.24, y: 72.05), controlPoint1: CGPoint(x: 92.7, y: 72.13), controlPoint2: CGPoint(x: 92.44, y: 72.07))
        bezierPath.addCurve(to: CGPoint(x: 92.12, y: 72.04), controlPoint1: CGPoint(x: 92.12, y: 72.04), controlPoint2: CGPoint(x: 92.1, y: 72.05))
        bezierPath.addCurve(to: CGPoint(x: 92.16, y: 72.02), controlPoint1: CGPoint(x: 92.14, y: 72.03), controlPoint2: CGPoint(x: 92.16, y: 72.02))
        bezierPath.addCurve(to: CGPoint(x: 92.18, y: 72.01), controlPoint1: CGPoint(x: 92.22, y: 71.98), controlPoint2: CGPoint(x: 92.22, y: 71.98))
        bezierPath.addCurve(to: CGPoint(x: 91.78, y: 72.4), controlPoint1: CGPoint(x: 92.07, y: 72.11), controlPoint2: CGPoint(x: 91.94, y: 72.24))
        bezierPath.addCurve(to: CGPoint(x: 90.38, y: 73.98), controlPoint1: CGPoint(x: 91.39, y: 72.8), controlPoint2: CGPoint(x: 90.92, y: 73.33))
        bezierPath.addCurve(to: CGPoint(x: 86.56, y: 78.91), controlPoint1: CGPoint(x: 89.3, y: 75.26), controlPoint2: CGPoint(x: 88.01, y: 76.93))
        bezierPath.addCurve(to: CGPoint(x: 85.3, y: 80.66), controlPoint1: CGPoint(x: 86.15, y: 79.47), controlPoint2: CGPoint(x: 85.73, y: 80.06))
        bezierPath.addCurve(to: CGPoint(x: 80.33, y: 87.85), controlPoint1: CGPoint(x: 83.67, y: 82.93), controlPoint2: CGPoint(x: 81.98, y: 85.39))
        bezierPath.addCurve(to: CGPoint(x: 78.75, y: 90.22), controlPoint1: CGPoint(x: 79.75, y: 88.71), controlPoint2: CGPoint(x: 79.22, y: 89.51))
        bezierPath.addCurve(to: CGPoint(x: 78.32, y: 90.88), controlPoint1: CGPoint(x: 78.58, y: 90.47), controlPoint2: CGPoint(x: 78.44, y: 90.69))
        bezierPath.addCurve(to: CGPoint(x: 78.17, y: 91.1), controlPoint1: CGPoint(x: 78.24, y: 90.99), controlPoint2: CGPoint(x: 78.19, y: 91.07))
        bezierPath.addCurve(to: CGPoint(x: 68.24, y: 93.19), controlPoint1: CGPoint(x: 76, y: 94.44), controlPoint2: CGPoint(x: 71.55, y: 95.38))
        bezierPath.addCurve(to: CGPoint(x: 66.17, y: 83.18), controlPoint1: CGPoint(x: 64.93, y: 91), controlPoint2: CGPoint(x: 64, y: 86.52))
        bezierPath.close()
        condColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 85.46, y: 106.74))
        bezier2Path.addCurve(to: CGPoint(x: 83.96, y: 67.28), controlPoint1: CGPoint(x: 83.49, y: 82.96), controlPoint2: CGPoint(x: 83.15, y: 71.62))
        bezier2Path.addCurve(to: CGPoint(x: 85.34, y: 63.44), controlPoint1: CGPoint(x: 84.21, y: 65.95), controlPoint2: CGPoint(x: 84.58, y: 64.75))
        bezier2Path.addCurve(to: CGPoint(x: 95.64, y: 58.3), controlPoint1: CGPoint(x: 87.26, y: 60.12), controlPoint2: CGPoint(x: 90.9, y: 57.68))
        bezier2Path.addCurve(to: CGPoint(x: 96.86, y: 58.54), controlPoint1: CGPoint(x: 96.27, y: 58.4), controlPoint2: CGPoint(x: 96.27, y: 58.4))
        bezier2Path.addCurve(to: CGPoint(x: 104.28, y: 71.16), controlPoint1: CGPoint(x: 102.36, y: 59.95), controlPoint2: CGPoint(x: 105.69, y: 65.6))
        bezier2Path.addCurve(to: CGPoint(x: 91.77, y: 78.64), controlPoint1: CGPoint(x: 102.88, y: 76.71), controlPoint2: CGPoint(x: 97.27, y: 80.06))
        bezier2Path.addCurve(to: CGPoint(x: 92.98, y: 78.88), controlPoint1: CGPoint(x: 92.35, y: 78.78), controlPoint2: CGPoint(x: 92.35, y: 78.78))
        bezier2Path.addCurve(to: CGPoint(x: 103.13, y: 73.88), controlPoint1: CGPoint(x: 97.68, y: 79.5), controlPoint2: CGPoint(x: 101.27, y: 77.09))
        bezier2Path.addCurve(to: CGPoint(x: 103.97, y: 71.96), controlPoint1: CGPoint(x: 103.52, y: 73.2), controlPoint2: CGPoint(x: 103.79, y: 72.56))
        bezier2Path.addCurve(to: CGPoint(x: 104.19, y: 71.11), controlPoint1: CGPoint(x: 104.08, y: 71.63), controlPoint2: CGPoint(x: 104.15, y: 71.35))
        bezier2Path.addCurve(to: CGPoint(x: 104.22, y: 70.93), controlPoint1: CGPoint(x: 104.21, y: 71.02), controlPoint2: CGPoint(x: 104.22, y: 70.96))
        bezier2Path.addCurve(to: CGPoint(x: 104.21, y: 71.05), controlPoint1: CGPoint(x: 104.22, y: 70.94), controlPoint2: CGPoint(x: 104.21, y: 70.98))
        bezier2Path.addCurve(to: CGPoint(x: 104.15, y: 72.09), controlPoint1: CGPoint(x: 104.19, y: 71.29), controlPoint2: CGPoint(x: 104.17, y: 71.63))
        bezier2Path.addCurve(to: CGPoint(x: 104.19, y: 77.45), controlPoint1: CGPoint(x: 104.11, y: 73.34), controlPoint2: CGPoint(x: 104.12, y: 75.12))
        bezier2Path.addCurve(to: CGPoint(x: 105.97, y: 105.02), controlPoint1: CGPoint(x: 104.37, y: 83.51), controlPoint2: CGPoint(x: 104.94, y: 92.55))
        bezier2Path.addCurve(to: CGPoint(x: 96.57, y: 116.22), controlPoint1: CGPoint(x: 106.44, y: 110.73), controlPoint2: CGPoint(x: 102.23, y: 115.74))
        bezier2Path.addCurve(to: CGPoint(x: 85.46, y: 106.74), controlPoint1: CGPoint(x: 90.9, y: 116.69), controlPoint2: CGPoint(x: 85.93, y: 112.45))
        bezier2Path.close()
        condColor.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 100.04, y: 146.13))
        bezier3Path.addCurve(to: CGPoint(x: 93.59, y: 134.12), controlPoint1: CGPoint(x: 97.36, y: 142.62), controlPoint2: CGPoint(x: 95.23, y: 138.58))
        bezier3Path.addCurve(to: CGPoint(x: 89.97, y: 118.67), controlPoint1: CGPoint(x: 91.76, y: 129.16), controlPoint2: CGPoint(x: 90.6, y: 123.92))
        bezier3Path.addCurve(to: CGPoint(x: 89.53, y: 113.46), controlPoint1: CGPoint(x: 89.75, y: 116.81), controlPoint2: CGPoint(x: 89.6, y: 115.06))
        bezier3Path.addCurve(to: CGPoint(x: 89.46, y: 111.06), controlPoint1: CGPoint(x: 89.48, y: 112.43), controlPoint2: CGPoint(x: 89.46, y: 111.61))
        bezier3Path.addCurve(to: CGPoint(x: 89.46, y: 111), controlPoint1: CGPoint(x: 89.46, y: 111.02), controlPoint2: CGPoint(x: 89.46, y: 111.02))
        bezier3Path.addCurve(to: CGPoint(x: 96.08, y: 104.47), controlPoint1: CGPoint(x: 89.5, y: 107.35), controlPoint2: CGPoint(x: 92.46, y: 104.43))
        bezier3Path.addCurve(to: CGPoint(x: 102.56, y: 111.14), controlPoint1: CGPoint(x: 99.7, y: 104.51), controlPoint2: CGPoint(x: 102.6, y: 107.49))
        bezier3Path.addCurve(to: CGPoint(x: 102.56, y: 111.13), controlPoint1: CGPoint(x: 102.56, y: 111.13), controlPoint2: CGPoint(x: 102.56, y: 111.13))
        bezier3Path.addCurve(to: CGPoint(x: 102.61, y: 112.82), controlPoint1: CGPoint(x: 102.56, y: 111.45), controlPoint2: CGPoint(x: 102.57, y: 112.03))
        bezier3Path.addCurve(to: CGPoint(x: 102.97, y: 117.08), controlPoint1: CGPoint(x: 102.67, y: 114.11), controlPoint2: CGPoint(x: 102.79, y: 115.54))
        bezier3Path.addCurve(to: CGPoint(x: 105.86, y: 129.52), controlPoint1: CGPoint(x: 103.49, y: 121.37), controlPoint2: CGPoint(x: 104.43, y: 125.62))
        bezier3Path.addCurve(to: CGPoint(x: 110.41, y: 138.06), controlPoint1: CGPoint(x: 107.07, y: 132.8), controlPoint2: CGPoint(x: 108.59, y: 135.68))
        bezier3Path.addCurve(to: CGPoint(x: 109.23, y: 147.32), controlPoint1: CGPoint(x: 112.62, y: 140.95), controlPoint2: CGPoint(x: 112.09, y: 145.1))
        bezier3Path.addCurve(to: CGPoint(x: 100.04, y: 146.13), controlPoint1: CGPoint(x: 106.36, y: 149.55), controlPoint2: CGPoint(x: 102.25, y: 149.02))
        bezier3Path.close()
        condColor.setFill()
        bezier3Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 85.28, y: 114.07))
        bezier6Path.addCurve(to: CGPoint(x: 88.47, y: 111.9), controlPoint1: CGPoint(x: 85.74, y: 113.72), controlPoint2: CGPoint(x: 87.97, y: 112.11))
        bezier6Path.addCurve(to: CGPoint(x: 90.74, y: 128.47), controlPoint1: CGPoint(x: 88.05, y: 120.35), controlPoint2: CGPoint(x: 89.79, y: 126.35))
        bezier6Path.addCurve(to: CGPoint(x: 79.25, y: 140.89), controlPoint1: CGPoint(x: 88.26, y: 131.34), controlPoint2: CGPoint(x: 84.23, y: 135.24))
        bezier6Path.addCurve(to: CGPoint(x: 70, y: 141.44), controlPoint1: CGPoint(x: 76.85, y: 143.62), controlPoint2: CGPoint(x: 72.71, y: 143.86))
        bezier6Path.addCurve(to: CGPoint(x: 69.46, y: 132.12), controlPoint1: CGPoint(x: 67.3, y: 139.02), controlPoint2: CGPoint(x: 67.06, y: 134.84))
        bezier6Path.addCurve(to: CGPoint(x: 80.16, y: 119.63), controlPoint1: CGPoint(x: 75.94, y: 124.77), controlPoint2: CGPoint(x: 77.88, y: 122.31))
        condColor.setFill()
        bezier6Path.fill()
        
        context.restoreGState()

    }

    @objc public dynamic class func drawSittingGoal(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 180, height: 180), resizing: ResizingBehavior = .aspectFit, postureGoalPercentage: CGFloat = 0.066) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 180, height: 180), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 180, y: resizedFrame.height / 180)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 180, resizedFrame.height / 180)


        //// Color Declarations
        let paoDrop = UIColor(red: 0.475, green: 0.749, blue: 0.906, alpha: 1.000)
        var paoDropHueComponent: CGFloat = 1
        var paoDropSaturationComponent: CGFloat = 1
        var paoDropBrightnessComponent: CGFloat = 1
        paoDrop.getHue(&paoDropHueComponent, saturation: &paoDropSaturationComponent, brightness: &paoDropBrightnessComponent, alpha: nil)

        let paoButtonCenter = UIColor(hue: paoDropHueComponent, saturation: 0.182, brightness: paoDropBrightnessComponent, alpha: paoDrop.cgColor.alpha)

        //// Shadow Declarations
        let shadow2 = NSShadow()
        shadow2.shadowColor = UIColor.black.withAlphaComponent(0.18)
        shadow2.shadowOffset = CGSize(width: 0, height: 0)
        shadow2.shadowBlurRadius = 6

        //// Variable Declarations
        let postGoalAngle: CGFloat = 449 - postureGoalPercentage * 360
        let condColor = UIColor(red: 121.0 / 255.0 * postureGoalPercentage + 231.0 / 255.0 * (1 - postureGoalPercentage), green: 191.0 / 255.0 * postureGoalPercentage + 121.0 / 255.0 * (1 - postureGoalPercentage), blue: 231.0 / 255.0 * postureGoalPercentage + 121.0 / 255.0 * (1 - postureGoalPercentage), alpha: 1)

        //// background Drawing
        let backgroundPath = UIBezierPath()
        backgroundPath.move(to: CGPoint(x: 177.5, y: 90))
        backgroundPath.addCurve(to: CGPoint(x: 90, y: 177.5), controlPoint1: CGPoint(x: 177.5, y: 138.32), controlPoint2: CGPoint(x: 138.32, y: 177.5))
        backgroundPath.addCurve(to: CGPoint(x: 2.5, y: 90), controlPoint1: CGPoint(x: 41.68, y: 177.5), controlPoint2: CGPoint(x: 2.5, y: 138.32))
        backgroundPath.addCurve(to: CGPoint(x: 90, y: 2.5), controlPoint1: CGPoint(x: 2.5, y: 41.68), controlPoint2: CGPoint(x: 41.68, y: 2.5))
        backgroundPath.addCurve(to: CGPoint(x: 177.5, y: 90), controlPoint1: CGPoint(x: 138.32, y: 2.5), controlPoint2: CGPoint(x: 177.5, y: 41.68))
        backgroundPath.addLine(to: CGPoint(x: 162.5, y: 90))
        backgroundPath.addCurve(to: CGPoint(x: 90, y: 17.5), controlPoint1: CGPoint(x: 162.5, y: 49.96), controlPoint2: CGPoint(x: 130.04, y: 17.5))
        backgroundPath.addCurve(to: CGPoint(x: 17.5, y: 90), controlPoint1: CGPoint(x: 49.96, y: 17.5), controlPoint2: CGPoint(x: 17.5, y: 49.96))
        backgroundPath.addCurve(to: CGPoint(x: 90, y: 162.5), controlPoint1: CGPoint(x: 17.5, y: 130.04), controlPoint2: CGPoint(x: 49.96, y: 162.5))
        backgroundPath.addCurve(to: CGPoint(x: 162.5, y: 90), controlPoint1: CGPoint(x: 130.04, y: 162.5), controlPoint2: CGPoint(x: 162.5, y: 130.04))
        backgroundPath.addLine(to: CGPoint(x: 177.5, y: 90))
        backgroundPath.close()
        paoButtonCenter.setFill()
        backgroundPath.fill()

        ////// background Inner Shadow
        context.saveGState()
        context.clip(to: backgroundPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((shadow2.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let backgroundOpaqueShadow = (shadow2.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: shadow2.shadowOffset.width * resizedShadowScale, height: shadow2.shadowOffset.height * resizedShadowScale), blur: shadow2.shadowBlurRadius * resizedShadowScale, color: backgroundOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        backgroundOpaqueShadow.setFill()
        backgroundPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// postureGoalBar Drawing
        let postureGoalBarRect = CGRect(x: 10, y: 10, width: 160, height: 160)
        let postureGoalBarPath = UIBezierPath()
        postureGoalBarPath.addArc(withCenter: CGPoint(x: postureGoalBarRect.midX, y: postureGoalBarRect.midY), radius: postureGoalBarRect.width / 2, startAngle: -450 * CGFloat.pi/180, endAngle: -postGoalAngle * CGFloat.pi/180, clockwise: true)

        condColor.setStroke()
        postureGoalBarPath.lineWidth = 15
        postureGoalBarPath.lineCapStyle = .round
        postureGoalBarPath.lineJoinStyle = .round
        postureGoalBarPath.stroke()


        //// sittingPerson
        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 64.93, y: 32.83, width: 23, height: 23))
        condColor.setFill()
        oval2Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 74.43, y: 58.99))
        bezier4Path.addCurve(to: CGPoint(x: 64.14, y: 62.15), controlPoint1: CGPoint(x: 70.3, y: 58.45), controlPoint2: CGPoint(x: 66.31, y: 58.5))
        bezier4Path.addCurve(to: CGPoint(x: 59.06, y: 87.02), controlPoint1: CGPoint(x: 61.97, y: 65.81), controlPoint2: CGPoint(x: 59.06, y: 87.02))
        bezier4Path.addCurve(to: CGPoint(x: 58.66, y: 106), controlPoint1: CGPoint(x: 59.06, y: 87.02), controlPoint2: CGPoint(x: 56.91, y: 99.46))
        bezier4Path.addCurve(to: CGPoint(x: 71.85, y: 114.35), controlPoint1: CGPoint(x: 60.42, y: 112.54), controlPoint2: CGPoint(x: 63.44, y: 113.85))
        bezier4Path.addCurve(to: CGPoint(x: 91.72, y: 115.53), controlPoint1: CGPoint(x: 80.26, y: 114.86), controlPoint2: CGPoint(x: 91.72, y: 115.53))
        bezier4Path.addLine(to: CGPoint(x: 89.75, y: 137.61))
        bezier4Path.addCurve(to: CGPoint(x: 94.54, y: 144.26), controlPoint1: CGPoint(x: 89.75, y: 137.61), controlPoint2: CGPoint(x: 89.06, y: 143.06))
        bezier4Path.addCurve(to: CGPoint(x: 101.11, y: 139.88), controlPoint1: CGPoint(x: 100.02, y: 145.47), controlPoint2: CGPoint(x: 101.11, y: 139.88))
        bezier4Path.addLine(to: CGPoint(x: 104.8, y: 113.65))
        bezier4Path.addCurve(to: CGPoint(x: 99.33, y: 103.91), controlPoint1: CGPoint(x: 104.8, y: 113.65), controlPoint2: CGPoint(x: 105.42, y: 105.85))
        bezier4Path.addCurve(to: CGPoint(x: 80.15, y: 101.44), controlPoint1: CGPoint(x: 93.23, y: 101.98), controlPoint2: CGPoint(x: 82.31, y: 101.77))
        bezier4Path.addCurve(to: CGPoint(x: 79.72, y: 97.31), controlPoint1: CGPoint(x: 79.52, y: 101.01), controlPoint2: CGPoint(x: 79.72, y: 97.31))
        bezier4Path.addLine(to: CGPoint(x: 81.11, y: 84.6))
        bezier4Path.addCurve(to: CGPoint(x: 79.12, y: 83.18), controlPoint1: CGPoint(x: 81.11, y: 84.6), controlPoint2: CGPoint(x: 79.6, y: 83.52))
        bezier4Path.addCurve(to: CGPoint(x: 73.58, y: 77.29), controlPoint1: CGPoint(x: 76.77, y: 81.53), controlPoint2: CGPoint(x: 75.15, y: 78.92))
        bezier4Path.addCurve(to: CGPoint(x: 70.55, y: 72.37), controlPoint1: CGPoint(x: 72, y: 75.65), controlPoint2: CGPoint(x: 70.05, y: 73.05))
        bezier4Path.addCurve(to: CGPoint(x: 80.68, y: 82.94), controlPoint1: CGPoint(x: 71.06, y: 71.69), controlPoint2: CGPoint(x: 77.44, y: 80.6))
        bezier4Path.addCurve(to: CGPoint(x: 92.07, y: 86.75), controlPoint1: CGPoint(x: 83.91, y: 85.29), controlPoint2: CGPoint(x: 85.15, y: 86.42))
        bezier4Path.addCurve(to: CGPoint(x: 108.19, y: 88.45), controlPoint1: CGPoint(x: 98.99, y: 87.08), controlPoint2: CGPoint(x: 105.84, y: 88.4))
        bezier4Path.addCurve(to: CGPoint(x: 113.83, y: 84.69), controlPoint1: CGPoint(x: 110.54, y: 88.51), controlPoint2: CGPoint(x: 113.89, y: 86.53))
        bezier4Path.addCurve(to: CGPoint(x: 109.28, y: 79.17), controlPoint1: CGPoint(x: 113.78, y: 82.85), controlPoint2: CGPoint(x: 113.55, y: 79.76))
        bezier4Path.addCurve(to: CGPoint(x: 93.9, y: 77.56), controlPoint1: CGPoint(x: 105, y: 78.59), controlPoint2: CGPoint(x: 99.63, y: 78.03))
        bezier4Path.addCurve(to: CGPoint(x: 85.37, y: 74.43), controlPoint1: CGPoint(x: 88.17, y: 77.09), controlPoint2: CGPoint(x: 88.96, y: 77.23))
        bezier4Path.addCurve(to: CGPoint(x: 77.12, y: 65.56), controlPoint1: CGPoint(x: 81.78, y: 71.63), controlPoint2: CGPoint(x: 77.12, y: 65.56))
        bezier4Path.addCurve(to: CGPoint(x: 77.61, y: 64.86), controlPoint1: CGPoint(x: 77.12, y: 65.56), controlPoint2: CGPoint(x: 76.93, y: 64.74))
        bezier4Path.addCurve(to: CGPoint(x: 83.9, y: 71.57), controlPoint1: CGPoint(x: 78.28, y: 64.99), controlPoint2: CGPoint(x: 83.9, y: 71.57))
        bezier4Path.addCurve(to: CGPoint(x: 83.22, y: 63.93), controlPoint1: CGPoint(x: 83.9, y: 71.57), controlPoint2: CGPoint(x: 85.81, y: 67.2))
        bezier4Path.addCurve(to: CGPoint(x: 74.43, y: 58.99), controlPoint1: CGPoint(x: 80.63, y: 60.67), controlPoint2: CGPoint(x: 78.57, y: 59.52))
        bezier4Path.close()
        condColor.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 85.06, y: 70.61))
        bezier5Path.addCurve(to: CGPoint(x: 93.67, y: 75.45), controlPoint1: CGPoint(x: 85.06, y: 70.61), controlPoint2: CGPoint(x: 86.8, y: 74.9))
        bezier5Path.addCurve(to: CGPoint(x: 109.92, y: 76.82), controlPoint1: CGPoint(x: 100.53, y: 76.01), controlPoint2: CGPoint(x: 106.09, y: 76.76))
        bezier5Path.addCurve(to: CGPoint(x: 115.61, y: 80.28), controlPoint1: CGPoint(x: 113.75, y: 76.88), controlPoint2: CGPoint(x: 115.35, y: 78.99))
        bezier5Path.addCurve(to: CGPoint(x: 115.02, y: 83.77), controlPoint1: CGPoint(x: 115.87, y: 81.57), controlPoint2: CGPoint(x: 115.43, y: 82.95))
        bezier5Path.addCurve(to: CGPoint(x: 111.66, y: 78.69), controlPoint1: CGPoint(x: 114.94, y: 81.73), controlPoint2: CGPoint(x: 113.54, y: 79.06))
        bezier5Path.addCurve(to: CGPoint(x: 94.73, y: 76.75), controlPoint1: CGPoint(x: 109.77, y: 78.33), controlPoint2: CGPoint(x: 101.07, y: 77.31))
        bezier5Path.addCurve(to: CGPoint(x: 84.92, y: 72.51), controlPoint1: CGPoint(x: 88.39, y: 76.19), controlPoint2: CGPoint(x: 87.55, y: 75.59))
        bezier5Path.addCurve(to: CGPoint(x: 85.06, y: 70.61), controlPoint1: CGPoint(x: 84.82, y: 71.64), controlPoint2: CGPoint(x: 85.06, y: 70.61))
        bezier5Path.close()
        condColor.setFill()
        bezier5Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 48.82, y: 79.02))
        bezier7Path.addCurve(to: CGPoint(x: 53.22, y: 93.02), controlPoint1: CGPoint(x: 50.72, y: 82.89), controlPoint2: CGPoint(x: 52.16, y: 87.62))
        bezier7Path.addCurve(to: CGPoint(x: 55.06, y: 108.26), controlPoint1: CGPoint(x: 54.16, y: 97.86), controlPoint2: CGPoint(x: 54.75, y: 103.03))
        bezier7Path.addCurve(to: CGPoint(x: 55.36, y: 115.94), controlPoint1: CGPoint(x: 55.26, y: 111.71), controlPoint2: CGPoint(x: 55.36, y: 115.94))
        bezier7Path.addLine(to: CGPoint(x: 84.59, y: 116))
        bezier7Path.addCurve(to: CGPoint(x: 86.04, y: 117.47), controlPoint1: CGPoint(x: 85.4, y: 116.01), controlPoint2: CGPoint(x: 86.04, y: 116.66))
        bezier7Path.addCurve(to: CGPoint(x: 84.57, y: 118.91), controlPoint1: CGPoint(x: 86.03, y: 118.27), controlPoint2: CGPoint(x: 85.38, y: 118.91))
        bezier7Path.addLine(to: CGPoint(x: 53.81, y: 118.7))
        bezier7Path.addCurve(to: CGPoint(x: 52.08, y: 117.55), controlPoint1: CGPoint(x: 53, y: 118.7), controlPoint2: CGPoint(x: 52.08, y: 117.72))
        bezier7Path.addCurve(to: CGPoint(x: 52.15, y: 108.42), controlPoint1: CGPoint(x: 52.11, y: 115.39), controlPoint2: CGPoint(x: 52.35, y: 111.81))
        bezier7Path.addCurve(to: CGPoint(x: 50.36, y: 93.57), controlPoint1: CGPoint(x: 51.85, y: 103.32), controlPoint2: CGPoint(x: 51.27, y: 98.27))
        bezier7Path.addCurve(to: CGPoint(x: 46.2, y: 80.3), controlPoint1: CGPoint(x: 49.35, y: 88.4), controlPoint2: CGPoint(x: 47.97, y: 83.91))
        bezier7Path.addCurve(to: CGPoint(x: 46.87, y: 78.36), controlPoint1: CGPoint(x: 45.85, y: 79.58), controlPoint2: CGPoint(x: 46.15, y: 78.71))
        bezier7Path.addCurve(to: CGPoint(x: 48.82, y: 79.02), controlPoint1: CGPoint(x: 47.6, y: 78), controlPoint2: CGPoint(x: 48.47, y: 78.3))
        bezier7Path.close()
        condColor.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 64.33, y: 119.98))
        bezier8Path.addLine(to: CGPoint(x: 73.07, y: 120))
        bezier8Path.addLine(to: CGPoint(x: 73.04, y: 122.14))
        bezier8Path.addLine(to: CGPoint(x: 70.54, y: 122.28))
        bezier8Path.addCurve(to: CGPoint(x: 70.43, y: 132.66), controlPoint1: CGPoint(x: 70.54, y: 122.28), controlPoint2: CGPoint(x: 70.39, y: 129.75))
        bezier8Path.addCurve(to: CGPoint(x: 82.15, y: 137.5), controlPoint1: CGPoint(x: 78.29, y: 132.76), controlPoint2: CGPoint(x: 81.57, y: 136.65))
        bezier8Path.addCurve(to: CGPoint(x: 80.34, y: 138.52), controlPoint1: CGPoint(x: 82.73, y: 138.35), controlPoint2: CGPoint(x: 82.11, y: 140.59))
        bezier8Path.addCurve(to: CGPoint(x: 69.14, y: 135.23), controlPoint1: CGPoint(x: 78.58, y: 136.45), controlPoint2: CGPoint(x: 77.79, y: 135.47))
        bezier8Path.addCurve(to: CGPoint(x: 58.16, y: 137.21), controlPoint1: CGPoint(x: 60.49, y: 134.98), controlPoint2: CGPoint(x: 59.62, y: 136.4))
        bezier8Path.addCurve(to: CGPoint(x: 54.88, y: 138.46), controlPoint1: CGPoint(x: 56.7, y: 138.01), controlPoint2: CGPoint(x: 55.46, y: 140.9))
        bezier8Path.addCurve(to: CGPoint(x: 67.23, y: 132.55), controlPoint1: CGPoint(x: 55.06, y: 136.06), controlPoint2: CGPoint(x: 59.28, y: 132.98))
        bezier8Path.addCurve(to: CGPoint(x: 67.14, y: 122.08), controlPoint1: CGPoint(x: 67.15, y: 130.77), controlPoint2: CGPoint(x: 67.14, y: 122.08))
        bezier8Path.addLine(to: CGPoint(x: 64.38, y: 122))
        bezier8Path.addLine(to: CGPoint(x: 64.33, y: 119.98))
        bezier8Path.close()
        condColor.setFill()
        bezier8Path.fill()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 56.31, y: 139.88, width: 4, height: 4))
        condColor.setFill()
        oval3Path.fill()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 77.13, y: 139.81, width: 4, height: 4))
        condColor.setFill()
        oval4Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 144.41, y: 63.67))
        bezier9Path.addLine(to: CGPoint(x: 135.01, y: 91.09))
        bezier9Path.addCurve(to: CGPoint(x: 133.37, y: 91.88), controlPoint1: CGPoint(x: 134.78, y: 91.76), controlPoint2: CGPoint(x: 134.05, y: 92.11))
        bezier9Path.addCurve(to: CGPoint(x: 132.57, y: 90.26), controlPoint1: CGPoint(x: 132.7, y: 91.66), controlPoint2: CGPoint(x: 132.34, y: 90.93))
        bezier9Path.addLine(to: CGPoint(x: 141.97, y: 62.85))
        bezier9Path.addCurve(to: CGPoint(x: 143.61, y: 62.05), controlPoint1: CGPoint(x: 142.2, y: 62.18), controlPoint2: CGPoint(x: 142.93, y: 61.82))
        bezier9Path.addCurve(to: CGPoint(x: 144.41, y: 63.67), controlPoint1: CGPoint(x: 144.28, y: 62.28), controlPoint2: CGPoint(x: 144.64, y: 63))
        bezier9Path.close()
        condColor.setFill()
        bezier9Path.fill()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 138.04, y: 92.22))
        bezier10Path.addLine(to: CGPoint(x: 108.57, y: 92.18))
        bezier10Path.addCurve(to: CGPoint(x: 107.28, y: 90.89), controlPoint1: CGPoint(x: 107.86, y: 92.17), controlPoint2: CGPoint(x: 107.28, y: 91.6))
        bezier10Path.addCurve(to: CGPoint(x: 108.57, y: 89.61), controlPoint1: CGPoint(x: 107.29, y: 90.18), controlPoint2: CGPoint(x: 107.86, y: 89.61))
        bezier10Path.addLine(to: CGPoint(x: 138.05, y: 89.66))
        bezier10Path.addCurve(to: CGPoint(x: 139.33, y: 90.94), controlPoint1: CGPoint(x: 138.76, y: 89.66), controlPoint2: CGPoint(x: 139.33, y: 90.23))
        bezier10Path.addCurve(to: CGPoint(x: 138.04, y: 92.22), controlPoint1: CGPoint(x: 139.33, y: 91.65), controlPoint2: CGPoint(x: 138.75, y: 92.22))
        bezier10Path.close()
        condColor.setFill()
        bezier10Path.fill()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 106.5, y: 142.36))
        bezier11Path.addLine(to: CGPoint(x: 106.57, y: 95.78))
        bezier11Path.addCurve(to: CGPoint(x: 108.11, y: 94.24), controlPoint1: CGPoint(x: 106.57, y: 94.93), controlPoint2: CGPoint(x: 107.26, y: 94.24))
        bezier11Path.addCurve(to: CGPoint(x: 109.65, y: 95.78), controlPoint1: CGPoint(x: 108.97, y: 94.24), controlPoint2: CGPoint(x: 109.66, y: 94.93))
        bezier11Path.addLine(to: CGPoint(x: 109.58, y: 142.37))
        bezier11Path.addCurve(to: CGPoint(x: 108.04, y: 143.9), controlPoint1: CGPoint(x: 109.58, y: 143.22), controlPoint2: CGPoint(x: 108.89, y: 143.9))
        bezier11Path.addCurve(to: CGPoint(x: 106.5, y: 142.36), controlPoint1: CGPoint(x: 107.19, y: 143.9), controlPoint2: CGPoint(x: 106.5, y: 143.21))
        bezier11Path.close()
        condColor.setFill()
        bezier11Path.fill()


        //// Bezier 12 Drawing
        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: 90.54, y: 93.84))
        bezier12Path.addLine(to: CGPoint(x: 142.63, y: 93.65))
        bezier12Path.addCurve(to: CGPoint(x: 144.7, y: 95.69), controlPoint1: CGPoint(x: 143.77, y: 93.64), controlPoint2: CGPoint(x: 144.69, y: 94.56))
        bezier12Path.addCurve(to: CGPoint(x: 142.65, y: 97.75), controlPoint1: CGPoint(x: 144.7, y: 96.82), controlPoint2: CGPoint(x: 143.78, y: 97.74))
        bezier12Path.addLine(to: CGPoint(x: 90.56, y: 97.94))
        bezier12Path.addCurve(to: CGPoint(x: 88.49, y: 95.9), controlPoint1: CGPoint(x: 89.42, y: 97.95), controlPoint2: CGPoint(x: 88.5, y: 97.03))
        bezier12Path.addCurve(to: CGPoint(x: 90.54, y: 93.84), controlPoint1: CGPoint(x: 88.49, y: 94.77), controlPoint2: CGPoint(x: 89.41, y: 93.85))
        bezier12Path.close()
        condColor.setFill()
        bezier12Path.fill()
        
        context.restoreGState()

    }




    @objc(PaoDrawingsResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
